version: 2
# For more information on choosing an image (or alternatively using a
# VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
# To see the list of pre-built images that CircleCI provides for most common languages see
# https://circleci.com/docs/2.0/circleci-images/
defaults: &defaults
  docker:
    - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
  working_directory: ~/all-of-us/raw-data-repository
  parallelism: 1
  shell: /bin/bash --login
  environment:
    CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
    CIRCLE_TEST_REPORTS: /tmp/circleci-test-results

filter_master: &filter_master
  filters:
    branches:
      only: master

filter_releases: &filter_releases
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /v[0-9]+(-[0-9]+)*-rc[0-9]+[a-z]*/

jobs:
  build_and_test:
    <<: *defaults
    steps:
      - checkout
      - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
      - run:
          working_directory: ~/all-of-us/raw-data-repository
          command: 'sudo service mysql status || sudo service mysql start; '
      - restore_cache:
          keys:
          # This branch if available
          - v1-dep-{{ .Branch }}-
          # Default branch if not
          - v1-dep-master-
          # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
          - v1-dep-
      - run: sudo chmod o+w /opt
      - run: pip install --upgrade pip
      - run: pip install --upgrade httplib2 jira oauth2client parallel pylint
      - run: pip install -I alembic==0.9.1
      - run: ./ci/test.sh
      # Save test results
      - store_test_results:
          path: /tmp/circleci-test-results
      # Save artifacts
      - store_artifacts:
          path: /tmp/circleci-artifacts
      - store_artifacts:
          path: /tmp/circleci-test-results
        
  deploy_test:
    <<: *defaults
    steps:
      - checkout
      - run:
          working_directory: ~/all-of-us/raw-data-repository
          command: 'sudo service mysql status || sudo service mysql start; '
      - run: ./ci/activate_creds.sh ~/gcloud-credentials.key
      - run:
          command: ./tools/upgrade_database.sh -i https://pmi-drc-api-test.appspot.com --creds_file ~/gcloud-credentials.key
          working_directory: ~/all-of-us/raw-data-repository/rest-api
      - run: ./ci/deploy.sh pmi-drc-api-test config/config_test.json ~/gcloud-credentials.key
      - run: ./rest-api/test/test_server.sh -i https://pmi-drc-api-test.appspot.com -c ~/gcloud-credentials.key

  # To deploy to staging, cut a GitHub release on a green build, with tag of
  # the form v0-1-1-rc0. We use tags as AppEngine version names, so they must
  # follow AE rules (no dots).
  # This should match _RELEASE_TAG_RE in release_notes.py.
  deploy_staging:
    <<: *defaults
    steps:
    - checkout
    - run: ./ci/activate_creds.sh ~/gcloud-credentials.key
    - run: ./ci/release_notes.py all-of-us-rdr-staging
    - run:
        command: ./tools/upgrade_database.sh -i https://all-of-us-rdr-staging.appspot.com --creds_file ~/gcloud-credentials.key
        working_directory: ~/all-of-us/raw-data-repository/rest-api
    - run: ./ci/deploy.sh all-of-us-rdr-staging config/config_staging.json ~/gcloud-credentials.key
    - run: ./rest-api/test/test_server.sh -i https://all-of-us-rdr-staging.appspot.com -c ~/gcloud-credentials.key

    # Stable and production deployments are not done automatically but can be
    # manually executed with the test.sh and deploy.sh pair, e.g.:
    # ./ci/deploy.sh all-of-us-rdr-stable config/config_stable.json <configurator key file>
    # ./ci/deploy.sh all-of-us-rdr config/config_prod.json <configurator key file>

workflows:
  version: 2
  build_and_test:
    jobs:
      - build_and_test
  deploy_to_test:
    jobs:
      - build_and_test:
          <<: *filter_master
      - deploy_test:
          <<: *filter_master
          requires:
            - build_and_test

  deploy_to_staging:
    jobs:
      - build_and_test:
          <<: *filter_releases
      - deploy_staging:
          <<: *filter_releases
          requires:
            - build_and_test

