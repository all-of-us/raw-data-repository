#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Generated from FHIR 3.0.0.11832 on 2017-03-22.
#  2017, SMART Health IT.


import os
import io
import unittest
import json
from . import observation
from .fhirdate import FHIRDate


class ObservationTests(unittest.TestCase):
    def instantiate_from(self, filename):
        datadir = os.environ.get('FHIR_UNITTEST_DATADIR') or ''
        with io.open(os.path.join(datadir, filename), 'r', encoding='utf-8') as handle:
            js = json.load(handle)
            self.assertEqual("Observation", js["resourceType"])
        return observation.Observation(js)
    
    def testObservation1(self):
        inst = self.instantiate_from("observation-example-10minute-apgar-score.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation1(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation1(inst2)
    
    def implObservation1(self, inst):
        self.assertEqual(inst.category[0].coding[0].code, "survey")
        self.assertEqual(inst.category[0].coding[0].display, "Survey")
        self.assertEqual(inst.category[0].coding[0].system, "http://hl7.org/fhir/observation-category")
        self.assertEqual(inst.category[0].text, "Survey")
        self.assertEqual(inst.code.coding[0].code, "9271-8")
        self.assertEqual(inst.code.coding[0].display, "10 minute Apgar Score")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.coding[1].code, "169922007")
        self.assertEqual(inst.code.coding[1].display, "Apgar at 10 minutes")
        self.assertEqual(inst.code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.code.text, "10 minute Apgar Score")
        self.assertEqual(inst.component[0].code.coding[0].code, "32401-2")
        self.assertEqual(inst.component[0].code.coding[0].display, "10 minute Apgar Color")
        self.assertEqual(inst.component[0].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[0].code.coding[1].code, "249227004")
        self.assertEqual(inst.component[0].code.coding[1].display, "Apgar color score")
        self.assertEqual(inst.component[0].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[0].code.text, "Apgar color score")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].code, "LA6724-4")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].display, "Good color all over")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarcolor")
        self.assertEqual(inst.component[0].valueCodeableConcept.text, "2. Good color all over")
        self.assertEqual(inst.component[1].code.coding[0].code, "32402-0")
        self.assertEqual(inst.component[1].code.coding[0].display, "10 minute Apgar Heart Rate")
        self.assertEqual(inst.component[1].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[1].code.coding[1].code, "249223000")
        self.assertEqual(inst.component[1].code.coding[1].display, "Apgar heart rate score")
        self.assertEqual(inst.component[1].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[1].code.text, "Apgar respiratory effort score")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].code, "LA6718-6")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].display, "At least 100 beats per minute")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarheartrate")
        self.assertEqual(inst.component[1].valueCodeableConcept.text, "2. At least 100 beats per minute")
        self.assertEqual(inst.component[2].code.coding[0].code, "32404-6")
        self.assertEqual(inst.component[2].code.coding[0].display, "10 minute Apgar Reflex Irritability")
        self.assertEqual(inst.component[2].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[2].code.coding[1].code, "249226008")
        self.assertEqual(inst.component[2].code.coding[1].display, "Apgar response to stimulus score")
        self.assertEqual(inst.component[2].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[2].code.text, "Apgar response to stimulus score")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].code, "LA6721-0")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].display, "Grimace and pulling away, cough, or sneeze during suctioning")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarreflexirritability")
        self.assertEqual(inst.component[2].valueCodeableConcept.text, "2. Grimace and pulling away, cough, or sneeze during suctioning")
        self.assertEqual(inst.component[3].code.coding[0].code, "32403-8")
        self.assertEqual(inst.component[3].code.coding[0].display, "10 minute Apgar Muscle Tone")
        self.assertEqual(inst.component[3].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[3].code.coding[1].code, "249225007")
        self.assertEqual(inst.component[3].code.coding[1].display, "Apgar muscle tone score")
        self.assertEqual(inst.component[3].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[3].code.text, "Apgar muscle tone score")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].code, "LA6715-2")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].display, "Active motion ")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarmuscletone")
        self.assertEqual(inst.component[3].valueCodeableConcept.text, "2. Active motion")
        self.assertEqual(inst.component[4].code.coding[0].code, "32405-3")
        self.assertEqual(inst.component[4].code.coding[0].display, "10 minute Apgar Respiratory effort")
        self.assertEqual(inst.component[4].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[4].code.coding[1].code, "249224006")
        self.assertEqual(inst.component[4].code.coding[1].display, "Apgar respiratory effort score")
        self.assertEqual(inst.component[4].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[4].code.text, "Apgar respiratory effort score")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].code, "LA6727-7")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].display, "Good, strong cry; normal rate and effort of breathing    ")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarrespiratoryeffort")
        self.assertEqual(inst.component[4].valueCodeableConcept.text, "2. Good, strong cry; normal rate and effort of breathing")
        self.assertEqual(inst.contained[0].id, "newborn")
        self.assertEqual(inst.effectiveDateTime.date, FHIRDate("2016-05-18T22:33:22Z").date)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2016-05-18T22:33:22Z")
        self.assertEqual(inst.id, "10minute-apgar-score")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "{score}")
        self.assertEqual(inst.valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.valueQuantity.value, 10)
    
    def testObservation2(self):
        inst = self.instantiate_from("observation-example-1minute-apgar-score.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation2(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation2(inst2)
    
    def implObservation2(self, inst):
        self.assertEqual(inst.category[0].coding[0].code, "survey")
        self.assertEqual(inst.category[0].coding[0].display, "Survey")
        self.assertEqual(inst.category[0].coding[0].system, "http://hl7.org/fhir/observation-category")
        self.assertEqual(inst.category[0].text, "Survey")
        self.assertEqual(inst.code.coding[0].code, "9272-6")
        self.assertEqual(inst.code.coding[0].display, "1 minute Apgar Score")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.coding[1].code, "169895004")
        self.assertEqual(inst.code.coding[1].display, "Apgar at 1 minute")
        self.assertEqual(inst.code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.code.text, "1 minute Apgar Score")
        self.assertEqual(inst.component[0].code.coding[0].code, "32406-1")
        self.assertEqual(inst.component[0].code.coding[0].display, "1 minute Apgar Color")
        self.assertEqual(inst.component[0].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[0].code.coding[1].code, "249227004")
        self.assertEqual(inst.component[0].code.coding[1].display, "Apgar color score")
        self.assertEqual(inst.component[0].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[0].code.text, "Apgar color score")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].code, "LA6722-8")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].display, "The baby's whole body is completely bluish-gray or pale")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].extension[0].valueDecimal, 0)
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[1].code, "0")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarcolor")
        self.assertEqual(inst.component[0].valueCodeableConcept.text, "0. The baby's whole body is completely bluish-gray or pale")
        self.assertEqual(inst.component[1].code.coding[0].code, "32407-9")
        self.assertEqual(inst.component[1].code.coding[0].display, "1 minute Apgar Heart Rate")
        self.assertEqual(inst.component[1].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[1].code.coding[1].code, "249223000")
        self.assertEqual(inst.component[1].code.coding[1].display, "Apgar heart rate score")
        self.assertEqual(inst.component[1].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[1].code.text, "Apgar respiratory effort score")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].code, "LA6716-0")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].display, "No heart rate")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].extension[0].valueDecimal, 0)
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[1].code, "0")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarheartrate")
        self.assertEqual(inst.component[1].valueCodeableConcept.text, "0. No heart rate")
        self.assertEqual(inst.component[2].code.coding[0].code, "32409-5")
        self.assertEqual(inst.component[2].code.coding[0].display, "1 minute Apgar Reflex Irritability")
        self.assertEqual(inst.component[2].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[2].code.coding[1].code, "249226008")
        self.assertEqual(inst.component[2].code.coding[1].display, "Apgar response to stimulus score")
        self.assertEqual(inst.component[2].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[2].code.text, "Apgar response to stimulus score")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].code, "LA6719-4")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].display, "No response to airways being suctioned")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].extension[0].valueDecimal, 0)
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[1].code, "0")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarreflexirritability")
        self.assertEqual(inst.component[2].valueCodeableConcept.text, "0. No response to airways being suctioned")
        self.assertEqual(inst.component[3].code.coding[0].code, "32408-7")
        self.assertEqual(inst.component[3].code.coding[0].display, "1 minute Apgar Muscle Tone")
        self.assertEqual(inst.component[3].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[3].code.coding[1].code, "249225007")
        self.assertEqual(inst.component[3].code.coding[1].display, "Apgar muscle tone score")
        self.assertEqual(inst.component[3].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[3].code.text, "Apgar muscle tone score")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].code, "LA6713-7")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].display, "Limp; no movement")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].extension[0].valueDecimal, 0)
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[1].code, "0")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarmuscletone")
        self.assertEqual(inst.component[3].valueCodeableConcept.text, "0. Limp; no movement")
        self.assertEqual(inst.component[4].code.coding[0].code, "32410-3")
        self.assertEqual(inst.component[4].code.coding[0].display, "1 minute Apgar Respiratory effort")
        self.assertEqual(inst.component[4].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[4].code.coding[1].code, "249224006")
        self.assertEqual(inst.component[4].code.coding[1].display, "Apgar respiratory effort score")
        self.assertEqual(inst.component[4].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[4].code.text, "Apgar respiratory effort score")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].code, "LA6725-1")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].display, "Not breathing")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].extension[0].valueDecimal, 0)
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[1].code, "0")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarrespiratoryeffort")
        self.assertEqual(inst.component[4].valueCodeableConcept.text, "0. Not breathing")
        self.assertEqual(inst.contained[0].id, "newborn")
        self.assertEqual(inst.effectiveDateTime.date, FHIRDate("2016-05-18T22:33:22Z").date)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2016-05-18T22:33:22Z")
        self.assertEqual(inst.id, "1minute-apgar-score")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "{score}")
        self.assertEqual(inst.valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.valueQuantity.value, 0)
    
    def testObservation3(self):
        inst = self.instantiate_from("observation-example-20minute-apgar-score.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation3(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation3(inst2)
    
    def implObservation3(self, inst):
        self.assertEqual(inst.category[0].coding[0].code, "survey")
        self.assertEqual(inst.category[0].coding[0].display, "Survey")
        self.assertEqual(inst.category[0].coding[0].system, "http://hl7.org/fhir/observation-category")
        self.assertEqual(inst.category[0].text, "Survey")
        self.assertEqual(inst.code.coding[0].code, "443849008")
        self.assertEqual(inst.code.coding[0].display, "Apgar score at 20 minutes")
        self.assertEqual(inst.code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.code.text, "20 minute Apgar Score")
        self.assertEqual(inst.component[0].code.coding[0].code, "249227004")
        self.assertEqual(inst.component[0].code.coding[0].display, "Apgar color score")
        self.assertEqual(inst.component[0].code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[0].code.text, "Apgar color score")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].code, "LA6724-4")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].display, "Good color all over")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarcolor")
        self.assertEqual(inst.component[0].valueCodeableConcept.text, "2. Good color all over")
        self.assertEqual(inst.component[1].code.coding[0].code, "249223000")
        self.assertEqual(inst.component[1].code.coding[0].display, "Apgar heart rate score")
        self.assertEqual(inst.component[1].code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[1].code.text, "Apgar respiratory effort score")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].code, "LA6718-6")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].display, "At least 100 beats per minute")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarheartrate")
        self.assertEqual(inst.component[1].valueCodeableConcept.text, "2. At least 100 beats per minute")
        self.assertEqual(inst.component[2].code.coding[0].code, "249226008")
        self.assertEqual(inst.component[2].code.coding[0].display, "Apgar response to stimulus score")
        self.assertEqual(inst.component[2].code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[2].code.text, "Apgar response to stimulus score")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].code, "LA6721-0")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].display, "Grimace and pulling away, cough, or sneeze during suctioning")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarreflexirritability")
        self.assertEqual(inst.component[2].valueCodeableConcept.text, "2. Grimace and pulling away, cough, or sneeze during suctioning")
        self.assertEqual(inst.component[3].code.coding[0].code, "249225007")
        self.assertEqual(inst.component[3].code.coding[0].display, "Apgar muscle tone score")
        self.assertEqual(inst.component[3].code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[3].code.text, "Apgar muscle tone score")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].code, "LA6715-2")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].display, "Active motion ")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarmuscletone")
        self.assertEqual(inst.component[3].valueCodeableConcept.text, "2. Active motion")
        self.assertEqual(inst.component[4].code.coding[0].code, "249224006")
        self.assertEqual(inst.component[4].code.coding[0].display, "Apgar respiratory effort score")
        self.assertEqual(inst.component[4].code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[4].code.text, "Apgar respiratory effort score")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].code, "LA6727-7")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].display, "Good, strong cry; normal rate and effort of breathing    ")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarrespiratoryeffort")
        self.assertEqual(inst.component[4].valueCodeableConcept.text, "2. Good, strong cry; normal rate and effort of breathing")
        self.assertEqual(inst.contained[0].id, "newborn")
        self.assertEqual(inst.effectiveDateTime.date, FHIRDate("2016-05-18T22:33:22Z").date)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2016-05-18T22:33:22Z")
        self.assertEqual(inst.id, "20minute-apgar-score")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "{score}")
        self.assertEqual(inst.valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.valueQuantity.value, 10)
    
    def testObservation4(self):
        inst = self.instantiate_from("observation-example-2minute-apgar-score.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation4(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation4(inst2)
    
    def implObservation4(self, inst):
        self.assertEqual(inst.category[0].coding[0].code, "survey")
        self.assertEqual(inst.category[0].coding[0].display, "Survey")
        self.assertEqual(inst.category[0].coding[0].system, "http://hl7.org/fhir/observation-category")
        self.assertEqual(inst.category[0].text, "Survey")
        self.assertEqual(inst.code.coding[0].code, "9273-4")
        self.assertEqual(inst.code.coding[0].display, "2 minute Apgar Score")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.text, "2 minute Apgar Score")
        self.assertEqual(inst.component[0].code.coding[0].code, "249227004")
        self.assertEqual(inst.component[0].code.coding[0].display, "Apgar color score")
        self.assertEqual(inst.component[0].code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[0].code.text, "Apgar color score")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].code, "LA6723-6")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].display, "Good color in body with bluish hands or feet")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].extension[0].valueDecimal, 1)
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[1].code, "1")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarcolor")
        self.assertEqual(inst.component[0].valueCodeableConcept.text, "1. Good color in body with bluish hands or feet")
        self.assertEqual(inst.component[1].code.coding[0].code, "249223000")
        self.assertEqual(inst.component[1].code.coding[0].display, "Apgar heart rate score")
        self.assertEqual(inst.component[1].code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[1].code.text, "Apgar respiratory effort score")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].code, "LA6720-2")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].display, "Fewer than 100 beats per minute")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].extension[0].valueDecimal, 1)
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[1].code, "1")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarheartrate")
        self.assertEqual(inst.component[1].valueCodeableConcept.text, "1. Fewer than 100 beats per minute")
        self.assertEqual(inst.component[2].code.coding[0].code, "249226008")
        self.assertEqual(inst.component[2].code.coding[0].display, "Apgar response to stimulus score")
        self.assertEqual(inst.component[2].code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[2].code.text, "Apgar response to stimulus score")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].code, "LA6721-0")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].display, "Grimace during suctioning")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].extension[0].valueDecimal, 1)
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[1].code, "1")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarreflexirritability")
        self.assertEqual(inst.component[2].valueCodeableConcept.text, "1. Grimace during suctioning")
        self.assertEqual(inst.component[3].code.coding[0].code, "249225007")
        self.assertEqual(inst.component[3].code.coding[0].display, "Apgar muscle tone score")
        self.assertEqual(inst.component[3].code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[3].code.text, "Apgar muscle tone score")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].code, "LA6714-5")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].display, "Some flexion of arms and legs")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].extension[0].valueDecimal, 1)
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[1].code, "1")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarmuscletone")
        self.assertEqual(inst.component[3].valueCodeableConcept.text, "1. Some flexion of arms and legs")
        self.assertEqual(inst.component[4].code.coding[0].code, "249224006")
        self.assertEqual(inst.component[4].code.coding[0].display, "Apgar respiratory effort score")
        self.assertEqual(inst.component[4].code.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[4].code.text, "Apgar respiratory effort score")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].code, "LA6726-9")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].display, "Weak cry; may sound like whimpering, slow or irregular breathing")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].extension[0].valueDecimal, 1)
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[1].code, "1")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarrespiratoryeffort")
        self.assertEqual(inst.component[4].valueCodeableConcept.text, "1. Weak cry; may sound like whimpering, slow or irregular breathing")
        self.assertEqual(inst.contained[0].id, "newborn")
        self.assertEqual(inst.effectiveDateTime.date, FHIRDate("2016-05-18T22:33:22Z").date)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2016-05-18T22:33:22Z")
        self.assertEqual(inst.id, "2minute-apgar-score")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "{score}")
        self.assertEqual(inst.valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.valueQuantity.value, 5)
    
    def testObservation5(self):
        inst = self.instantiate_from("observation-example-5minute-apgar-score.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation5(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation5(inst2)
    
    def implObservation5(self, inst):
        self.assertEqual(inst.category[0].coding[0].code, "survey")
        self.assertEqual(inst.category[0].coding[0].display, "Survey")
        self.assertEqual(inst.category[0].coding[0].system, "http://hl7.org/fhir/observation-category")
        self.assertEqual(inst.category[0].text, "Survey")
        self.assertEqual(inst.code.coding[0].code, "9274-2")
        self.assertEqual(inst.code.coding[0].display, "5 minute Apgar Score")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.coding[1].code, "169909004")
        self.assertEqual(inst.code.coding[1].display, "Apgar at 5 minutes")
        self.assertEqual(inst.code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.code.text, "5 minute Apgar Score")
        self.assertEqual(inst.component[0].code.coding[0].code, "32411-1")
        self.assertEqual(inst.component[0].code.coding[0].display, "5 minute Apgar Color")
        self.assertEqual(inst.component[0].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[0].code.coding[1].code, "249227004")
        self.assertEqual(inst.component[0].code.coding[1].display, "Apgar color score")
        self.assertEqual(inst.component[0].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[0].code.text, "Apgar color score")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].code, "LA6724-4")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].display, "Good color all over")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[0].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarcolor")
        self.assertEqual(inst.component[0].valueCodeableConcept.text, "2. Good color all over")
        self.assertEqual(inst.component[1].code.coding[0].code, "32412-9")
        self.assertEqual(inst.component[1].code.coding[0].display, "5 minute Apgar Heart Rate")
        self.assertEqual(inst.component[1].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[1].code.coding[1].code, "249223000")
        self.assertEqual(inst.component[1].code.coding[1].display, "Apgar heart rate score")
        self.assertEqual(inst.component[1].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[1].code.text, "Apgar respiratory effort score")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].code, "LA6718-6")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].display, "At least 100 beats per minute")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[1].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarheartrate")
        self.assertEqual(inst.component[1].valueCodeableConcept.text, "2. At least 100 beats per minute")
        self.assertEqual(inst.component[2].code.coding[0].code, "32414-5")
        self.assertEqual(inst.component[2].code.coding[0].display, "5 minute Apgar Reflex Irritability")
        self.assertEqual(inst.component[2].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[2].code.coding[1].code, "249226008")
        self.assertEqual(inst.component[2].code.coding[1].display, "Apgar response to stimulus score")
        self.assertEqual(inst.component[2].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[2].code.text, "Apgar response to stimulus score")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].code, "LA6721-0")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].display, "Grimace and pulling away, cough, or sneeze during suctioning")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[2].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarreflexirritability")
        self.assertEqual(inst.component[2].valueCodeableConcept.text, "2. Grimace and pulling away, cough, or sneeze during suctioning")
        self.assertEqual(inst.component[3].code.coding[0].code, "32413-7")
        self.assertEqual(inst.component[3].code.coding[0].display, "5 minute Apgar Muscle Tone")
        self.assertEqual(inst.component[3].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[3].code.coding[1].code, "249225007")
        self.assertEqual(inst.component[3].code.coding[1].display, "Apgar muscle tone score")
        self.assertEqual(inst.component[3].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[3].code.text, "Apgar muscle tone score")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].code, "LA6715-2")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].display, "Active motion ")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[3].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarmuscletone")
        self.assertEqual(inst.component[3].valueCodeableConcept.text, "2. Active motion")
        self.assertEqual(inst.component[4].code.coding[0].code, "32415-2")
        self.assertEqual(inst.component[4].code.coding[0].display, "5 minute Apgar Respiratory effort")
        self.assertEqual(inst.component[4].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[4].code.coding[1].code, "249224006")
        self.assertEqual(inst.component[4].code.coding[1].display, "Apgar respiratory effort score")
        self.assertEqual(inst.component[4].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[4].code.text, "Apgar respiratory effort score")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].code, "LA6727-7")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].display, "Good, strong cry; normal rate and effort of breathing    ")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].extension[0].url, "http://hl7.org/fhir/StructureDefinition/iso21090-CO-value")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].extension[0].valueDecimal, 2)
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[0].system, "http://loinc.org/la")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[1].code, "2")
        self.assertEqual(inst.component[4].valueCodeableConcept.coding[1].system, "http:/acme.ped/apgarrespiratoryeffort")
        self.assertEqual(inst.component[4].valueCodeableConcept.text, "2. Good, strong cry; normal rate and effort of breathing")
        self.assertEqual(inst.contained[0].id, "newborn")
        self.assertEqual(inst.effectiveDateTime.date, FHIRDate("2016-05-18T22:33:22Z").date)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2016-05-18T22:33:22Z")
        self.assertEqual(inst.id, "5minute-apgar-score")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "{score}")
        self.assertEqual(inst.valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.valueQuantity.value, 10)
    
    def testObservation6(self):
        inst = self.instantiate_from("observation-example-bloodpressure-cancel.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation6(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation6(inst2)
    
    def implObservation6(self, inst):
        self.assertEqual(inst.bodySite.coding[0].code, "368209003")
        self.assertEqual(inst.bodySite.coding[0].display, "Right arm")
        self.assertEqual(inst.bodySite.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[0].code, "vital-signs")
        self.assertEqual(inst.category[0].coding[0].display, "Vital Signs")
        self.assertEqual(inst.category[0].coding[0].system, "http://hl7.org/fhir/observation-category")
        self.assertEqual(inst.code.coding[0].code, "85354-9")
        self.assertEqual(inst.code.coding[0].display, "Bood pressure panel with all children optional")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.text, "Blood pressure systolic & diastolic")
        self.assertEqual(inst.comment, "In this example, the blood pressure measurements are not available due to cancellation of the order.  Data absent reason is present for each component")
        self.assertEqual(inst.component[0].code.coding[0].code, "8480-6")
        self.assertEqual(inst.component[0].code.coding[0].display, "Systolic blood pressure")
        self.assertEqual(inst.component[0].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[0].code.coding[1].code, "271649006")
        self.assertEqual(inst.component[0].code.coding[1].display, "Systolic blood pressure")
        self.assertEqual(inst.component[0].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[0].code.coding[2].code, "bp-s")
        self.assertEqual(inst.component[0].code.coding[2].display, "Systolic Blood pressure")
        self.assertEqual(inst.component[0].code.coding[2].system, "http://acme.org/devices/clinical-codes")
        self.assertEqual(inst.component[0].dataAbsentReason.coding[0].code, "not-asked")
        self.assertEqual(inst.component[0].dataAbsentReason.coding[0].display, "Not Asked")
        self.assertEqual(inst.component[0].dataAbsentReason.coding[0].system, "http://hl7.org/fhir/data-absent-reason")
        self.assertEqual(inst.component[1].code.coding[0].code, "8462-4")
        self.assertEqual(inst.component[1].code.coding[0].display, "Diastolic blood pressure")
        self.assertEqual(inst.component[1].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[1].dataAbsentReason.coding[0].code, "not-asked")
        self.assertEqual(inst.component[1].dataAbsentReason.coding[0].display, "Not Asked")
        self.assertEqual(inst.component[1].dataAbsentReason.coding[0].system, "http://hl7.org/fhir/data-absent-reason")
        self.assertEqual(inst.effectiveDateTime.date, FHIRDate("2012-09-17").date)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2012-09-17")
        self.assertEqual(inst.id, "blood-pressure-cancel")
        self.assertEqual(inst.identifier[0].system, "urn:ietf:rfc:3986")
        self.assertEqual(inst.identifier[0].value, "urn:uuid:187e0c12-8dd2-67e2-99b2-bf273c878281")
        self.assertEqual(inst.interpretation.coding[0].code, "L")
        self.assertEqual(inst.interpretation.coding[0].display, "low")
        self.assertEqual(inst.interpretation.coding[0].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.interpretation.text, "Below low normal")
        self.assertEqual(inst.meta.profile[0], "http://hl7.org/fhir/StructureDefinition/vitalsigns")
        self.assertEqual(inst.status, "cancelled")
        self.assertEqual(inst.text.status, "generated")
    
    def testObservation7(self):
        inst = self.instantiate_from("observation-example-bloodpressure-dar.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation7(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation7(inst2)
    
    def implObservation7(self, inst):
        self.assertEqual(inst.bodySite.coding[0].code, "368209003")
        self.assertEqual(inst.bodySite.coding[0].display, "Right arm")
        self.assertEqual(inst.bodySite.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[0].code, "vital-signs")
        self.assertEqual(inst.category[0].coding[0].display, "Vital Signs")
        self.assertEqual(inst.category[0].coding[0].system, "http://hl7.org/fhir/observation-category")
        self.assertEqual(inst.code.coding[0].code, "85354-9")
        self.assertEqual(inst.code.coding[0].display, "Bood pressure panel with all children optional")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.text, "Blood pressure systolic & diastolic")
        self.assertEqual(inst.component[0].code.coding[0].code, "8480-6")
        self.assertEqual(inst.component[0].code.coding[0].display, "Systolic blood pressure")
        self.assertEqual(inst.component[0].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[0].code.coding[1].code, "271649006")
        self.assertEqual(inst.component[0].code.coding[1].display, "Systolic blood pressure")
        self.assertEqual(inst.component[0].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[0].code.coding[2].code, "bp-s")
        self.assertEqual(inst.component[0].code.coding[2].display, "Systolic Blood pressure")
        self.assertEqual(inst.component[0].code.coding[2].system, "http://acme.org/devices/clinical-codes")
        self.assertEqual(inst.component[0].valueQuantity.code, "mm[Hg]")
        self.assertEqual(inst.component[0].valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.component[0].valueQuantity.unit, "mmHg")
        self.assertEqual(inst.component[0].valueQuantity.value, 107)
        self.assertEqual(inst.component[1].code.coding[0].code, "8462-4")
        self.assertEqual(inst.component[1].code.coding[0].display, "Diastolic blood pressure")
        self.assertEqual(inst.component[1].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[1].dataAbsentReason.coding[0].code, "not-performed")
        self.assertEqual(inst.component[1].dataAbsentReason.coding[0].display, "Not Performed")
        self.assertEqual(inst.component[1].dataAbsentReason.coding[0].system, "http://hl7.org/fhir/data-absent-reason")
        self.assertEqual(inst.effectiveDateTime.date, FHIRDate("2012-09-17").date)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2012-09-17")
        self.assertEqual(inst.id, "blood-pressure-dar")
        self.assertEqual(inst.identifier[0].system, "urn:ietf:rfc:3986")
        self.assertEqual(inst.identifier[0].value, "urn:uuid:187e0c12-8dd2-67e2-99b2-bf273c878281")
        self.assertEqual(inst.interpretation.coding[0].code, "L")
        self.assertEqual(inst.interpretation.coding[0].display, "low")
        self.assertEqual(inst.interpretation.coding[0].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.interpretation.text, "Below low normal")
        self.assertEqual(inst.meta.profile[0], "http://hl7.org/fhir/StructureDefinition/vitalsigns")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
    
    def testObservation8(self):
        inst = self.instantiate_from("observation-example-bloodpressure.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation8(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation8(inst2)
    
    def implObservation8(self, inst):
        self.assertEqual(inst.bodySite.coding[0].code, "368209003")
        self.assertEqual(inst.bodySite.coding[0].display, "Right arm")
        self.assertEqual(inst.bodySite.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.category[0].coding[0].code, "vital-signs")
        self.assertEqual(inst.category[0].coding[0].display, "Vital Signs")
        self.assertEqual(inst.category[0].coding[0].system, "http://hl7.org/fhir/observation-category")
        self.assertEqual(inst.code.coding[0].code, "85354-9")
        self.assertEqual(inst.code.coding[0].display, "Bood pressure panel with all children optional")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.text, "Blood pressure systolic & diastolic")
        self.assertEqual(inst.component[0].code.coding[0].code, "8480-6")
        self.assertEqual(inst.component[0].code.coding[0].display, "Systolic blood pressure")
        self.assertEqual(inst.component[0].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[0].code.coding[1].code, "271649006")
        self.assertEqual(inst.component[0].code.coding[1].display, "Systolic blood pressure")
        self.assertEqual(inst.component[0].code.coding[1].system, "http://snomed.info/sct")
        self.assertEqual(inst.component[0].code.coding[2].code, "bp-s")
        self.assertEqual(inst.component[0].code.coding[2].display, "Systolic Blood pressure")
        self.assertEqual(inst.component[0].code.coding[2].system, "http://acme.org/devices/clinical-codes")
        self.assertEqual(inst.component[0].interpretation.coding[0].code, "N")
        self.assertEqual(inst.component[0].interpretation.coding[0].display, "normal")
        self.assertEqual(inst.component[0].interpretation.coding[0].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.component[0].interpretation.text, "Normal")
        self.assertEqual(inst.component[0].valueQuantity.code, "mm[Hg]")
        self.assertEqual(inst.component[0].valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.component[0].valueQuantity.unit, "mmHg")
        self.assertEqual(inst.component[0].valueQuantity.value, 107)
        self.assertEqual(inst.component[1].code.coding[0].code, "8462-4")
        self.assertEqual(inst.component[1].code.coding[0].display, "Diastolic blood pressure")
        self.assertEqual(inst.component[1].code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.component[1].interpretation.coding[0].code, "L")
        self.assertEqual(inst.component[1].interpretation.coding[0].display, "low")
        self.assertEqual(inst.component[1].interpretation.coding[0].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.component[1].interpretation.text, "Below low normal")
        self.assertEqual(inst.component[1].valueQuantity.code, "mm[Hg]")
        self.assertEqual(inst.component[1].valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.component[1].valueQuantity.unit, "mmHg")
        self.assertEqual(inst.component[1].valueQuantity.value, 60)
        self.assertEqual(inst.effectiveDateTime.date, FHIRDate("2012-09-17").date)
        self.assertEqual(inst.effectiveDateTime.as_json(), "2012-09-17")
        self.assertEqual(inst.id, "blood-pressure")
        self.assertEqual(inst.identifier[0].system, "urn:ietf:rfc:3986")
        self.assertEqual(inst.identifier[0].value, "urn:uuid:187e0c12-8dd2-67e2-99b2-bf273c878281")
        self.assertEqual(inst.interpretation.coding[0].code, "L")
        self.assertEqual(inst.interpretation.coding[0].display, "low")
        self.assertEqual(inst.interpretation.coding[0].system, "http://hl7.org/fhir/v2/0078")
        self.assertEqual(inst.interpretation.text, "Below low normal")
        self.assertEqual(inst.meta.profile[0], "http://hl7.org/fhir/StructureDefinition/vitalsigns")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
    
    def testObservation9(self):
        inst = self.instantiate_from("observation-example-bmd.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation9(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation9(inst2)
    
    def implObservation9(self, inst):
        self.assertEqual(inst.bodySite.coding[0].code, "71341001:272741003=7771000")
        self.assertEqual(inst.bodySite.coding[0].system, "http://snomed.info/sct")
        self.assertEqual(inst.bodySite.text, "Left Femur")
        self.assertEqual(inst.code.coding[0].code, "24701-5")
        self.assertEqual(inst.code.coding[0].display, "Femur DXA Bone density")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.text, "BMD - Left Femur")
        self.assertEqual(inst.id, "bmd")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "g/cm-2")
        self.assertEqual(inst.valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.valueQuantity.unit, "g/cm²")
        self.assertEqual(inst.valueQuantity.value, 0.887)
    
    def testObservation10(self):
        inst = self.instantiate_from("observation-example-bmi.json")
        self.assertIsNotNone(inst, "Must have instantiated a Observation instance")
        self.implObservation10(inst)
        
        js = inst.as_json()
        self.assertEqual("Observation", js["resourceType"])
        inst2 = observation.Observation(js)
        self.implObservation10(inst2)
    
    def implObservation10(self, inst):
        self.assertEqual(inst.category[0].coding[0].code, "vital-signs")
        self.assertEqual(inst.category[0].coding[0].display, "Vital Signs")
        self.assertEqual(inst.category[0].coding[0].system, "http://hl7.org/fhir/observation-category")
        self.assertEqual(inst.category[0].text, "Vital Signs")
        self.assertEqual(inst.code.coding[0].code, "39156-5")
        self.assertEqual(inst.code.coding[0].display, "Body mass index (BMI) [Ratio]")
        self.assertEqual(inst.code.coding[0].system, "http://loinc.org")
        self.assertEqual(inst.code.text, "BMI")
        self.assertEqual(inst.effectiveDateTime.date, FHIRDate("1999-07-02").date)
        self.assertEqual(inst.effectiveDateTime.as_json(), "1999-07-02")
        self.assertEqual(inst.id, "bmi")
        self.assertEqual(inst.meta.profile[0], "http://hl7.org/fhir/StructureDefinition/vitalsigns")
        self.assertEqual(inst.status, "final")
        self.assertEqual(inst.text.status, "generated")
        self.assertEqual(inst.valueQuantity.code, "kg/m2")
        self.assertEqual(inst.valueQuantity.system, "http://unitsofmeasure.org")
        self.assertEqual(inst.valueQuantity.unit, "kg/m2")
        self.assertEqual(inst.valueQuantity.value, 16.2)

