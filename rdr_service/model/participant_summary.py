import datetime

from sqlalchemy import (
    Boolean,
    case,
    Column,
    Computed,
    Date,
    DateTime,
    ForeignKey,
    func,
    Index,
    Integer,
    SmallInteger,
    String,
    UnicodeText,
    event)
from sqlalchemy.dialects.mysql import JSON
from sqlalchemy.ext.declarative import declared_attr
from sqlalchemy.orm import relationship
from sqlalchemy.sql import expression

from rdr_service.model.base import Base, model_insert_listener, model_update_listener
from rdr_service.model.utils import Enum, EnumZeroBased, UTCDateTime, UTCDateTime6
from rdr_service.participant_enums import (
    EhrStatus,
    EnrollmentStatus,
    EnrollmentStatusV30,
    EnrollmentStatusV31,
    DigitalHealthSharingStatusV31,
    GenderIdentity,
    OrderStatus,
    PhysicalMeasurementsStatus,
    QuestionnaireStatus,
    Race,
    SampleCollectionMethod,
    SampleStatus,
    SuspensionStatus,
    WithdrawalReason,
    WithdrawalStatus,
    ParticipantCohort,
    ParticipantCohortPilotFlag,
    ConsentExpireStatus,
    DeceasedStatus,
    RetentionStatus,
    RetentionType,
    SelfReportedPhysicalMeasurementsStatus,
    OnSiteVerificationType,
    OnSiteVerificationVisitType,
    IdVerificationOriginType
)


# The only fields that can be returned, queried on, or ordered by for queries for withdrawn
# participants.
WITHDRAWN_PARTICIPANT_FIELDS = [
    "withdrawalStatus",
    "withdrawalTime",
    "withdrawalAuthored",
    "withdrawalReason",
    "withdrawalReasonJustification",
    "participantId",
    "hpoId",
    "organizationId",
    "siteId",
    "biobankId",
    "firstName",
    "middleName",
    "lastName",
    "dateOfBirth",
    "consentForStudyEnrollment",
    "consentForStudyEnrollmentAuthored",
    "consentForElectronicHealthRecords",
    "consentForElectronicHealthRecordsAuthored",
    "enrollmentStatus",
    "enrollmentStatusV3_0",
    "enrollmentStatusV3_1"
]

# The period of time for which withdrawn participants will still be returned in results for
# queries that don't ask for withdrawn participants.
WITHDRAWN_PARTICIPANT_VISIBILITY_TIME = datetime.timedelta(days=2)


class ParticipantSummary(Base):
    """Summary fields extracted from participant data (combined from multiple tables).
    Consented participants only."""

    __tablename__ = "participant_summary"
    participantId = Column(
        "participant_id", Integer, ForeignKey("participant.participant_id"), primary_key=True, autoincrement=False
    )
    """
    PMI-specific ID generated by the RDR and used for tracking/linking participant data.
    Human-readable 10-character string beginning with P.
    """

    biobankId = Column("biobank_id", Integer, nullable=False)
    """
    PMI-specific ID generated by the RDR and used exclusively for communicating with the biobank.
    Human-readable 10-character string beginning with prefix specific to the environment ("A" for production).
    """

    # PTC string fields will generally be limited to 255 chars; set our field lengths accordingly to
    # ensure that long values can be inserted.
    firstName = Column("first_name", String(255), nullable=False)
    """The first name of the participant."""

    middleName = Column("middle_name", String(255))
    """The middle name of the participant."""

    lastName = Column("last_name", String(255), nullable=False)
    """The last name of the participant."""

    zipCode = Column("zip_code", String(10))
    """The postal zip code of the participant."""

    stateId = Column("state_id", Integer, ForeignKey("code.code_id"))
    """The state the participant lives in"""
    state = None  # placeholder for docs, API sets on model using corresponding ID field
    """The state the participant lives in."""

    city = Column("city", String(255))
    """The city the participant lives in"""

    streetAddress = Column("street_address", String(255))
    """Line 1 of the street address the participant lives at."""

    streetAddress2 = Column("street_address2", String(255))
    """Line 2 of the street address the participant lives at. Absent if no line 2 given."""

    phoneNumber = Column("phone_number", String(80))
    """The phone number of the participant."""

    loginPhoneNumber = Column("login_phone_number", String(80))
    """A verified phone number for register, participants must provide a login_phone_number or email to register"""

    email = Column("email", String(255))
    """The email address participant provided to register; they must provide an email or a login_phone_number"""

    primaryLanguage = Column("primary_language", String(80))
    """
    Indicates the language of the consent that the participant signed. We only have "en" or "es" for now.
    @rdr_dictionary_show_unique_values
    """

    recontactMethodId = Column("recontact_method_id", Integer, ForeignKey("code.code_id"))
    """Which method the participant would like used for contact, i.e., phone or email"""
    recontactMethod = None  # placeholder for docs, API sets on model using corresponding ID field
    """Which method the participant would like used for contact. i.e. phone or email."""


    # deprecated - will remove languageId in the future
    languageId = Column("language_id", Integer, ForeignKey("code.code_id"))
    """DEPRECATED in favor of primary_language"""
    language = None  # placeholder for docs, API sets on model using corresponding ID field
    '*Deprecated*'

    dateOfBirth = Column("date_of_birth", Date)
    """The day the participant was born."""

    ageRange = None  # placeholder for docs, API sets on model using corresponding ID field
    """
    The "bucketed" age range of participant.

    :ref:`Enumerated values <age_range>`
    """

    genderIdentityId = Column("gender_identity_id", Integer, ForeignKey("code.code_id"))
    genderIdentity = Column("gender_identity", Enum(GenderIdentity))
    """
    The personal sense of one's own gender. It can correlate with assigned sex at birth or can differ from it.

    :ref:`Enumerated values <gender_identity>`
    """

    sexId = Column("sex_id", Integer, ForeignKey("code.code_id"))
    """Assigned sex at birth"""
    sex = None  # placeholder for docs, API sets on model using corresponding ID field
    """Assigned sex at birth."""

    sexualOrientationId = Column("sexual_orientation_id", Integer, ForeignKey("code.code_id"))
    """A person's sexual identity in relation to the gender(s) to which they are attracted."""
    sexualOrientation = None  # placeholder for docs, API sets on model using corresponding ID field
    """A person's sexual identity in relation to the gender to which they are attracted."""

    race = Column("race", Enum(Race), default=Race.UNSET)
    """
    A race is a grouping of humans based on shared physical or social qualities into categories generally viewed as
    distinct by society. First used to refer to speakers of a common language and then to denote national affiliations,
    by the 17th century the term race began to refer to physical (phenotypical) traits.

    :ref:`Enumerated values <race>`
    """

    educationId = Column("education_id", Integer, ForeignKey("code.code_id"))
    """The highest level of education the participant has received."""
    education = None  # placeholder for docs, API sets on model using corresponding ID field
    """The highest level of education the participant has received."""

    incomeId = Column("income_id", Integer, ForeignKey("code.code_id"))
    """Participant answer to what is your annual household income from all sources"""
    income = None  # placeholder for docs, API sets on model using corresponding ID field
    """Participant answer to what is your annual household income from all sources"""

    deceasedStatus = Column(
        "deceased_status",
        EnumZeroBased(DeceasedStatus),
        nullable=False,
        default=DeceasedStatus.UNSET
    )
    """
    Indicates whether the participant has a PENDING or APPROVED deceased reports.

    Will be UNSET for participants that have no deceased reports or only DENIED reports.
    """

    deceasedAuthored = Column("deceased_authored", UTCDateTime)
    """
    The UTC timestamp of when the report was entered into an external system,
    or when it was approved externally if it has been approved.
    """

    dateOfDeath = Column("date_of_death", Date)
    'Date of death if provided on the deceased report or when it was reviewed.'

    hpoId = Column("hpo_id", Integer, ForeignKey("hpo.hpo_id"), nullable=False)
    """
    HPO marked as primary for this participant, if any
    """

    awardee = None  # placeholder for docs, API sets this equal to the hpoId
    "Copy of the hpoId field"

    @declared_attr
    def organizationId(cls):
        """An organization a participant is paired with or "unset" if none"""
        return Column("organization_id", Integer, ForeignKey("organization.organization_id"))
    organization = None  # placeholder for docs, API sets on model using corresponding ID field
    """An organization a participant is paired with or UNSET if none."""

    @declared_attr
    def siteId(cls):
        """A physical location a participant is paired with or UNSET if none."""
        return Column("site_id", Integer, ForeignKey("site.site_id"))
    site = None  # placeholder for docs, API sets on model using corresponding ID field
    """A physical location a participant is paired with or UNSET if none."""

    @declared_attr
    def enrollmentSiteId(cls):
        return Column("enrollment_site_id", Integer, ForeignKey("site.site_id"))
    enrollmentSite = None  # placeholder for docs, API sets on model using corresponding ID field
    "A physical location a participant is enrolled with or UNSET if none."

    enrollmentStatus = Column("enrollment_status", Enum(EnrollmentStatus), default=EnrollmentStatus.INTERESTED)
    """
    Depends on a number of factors including questionnaires and biobank samples completed

    :ref:`Enumerated values <enrollment_status>
    """

    enrollmentStatusMemberTime = Column("enrollment_status_member_time", UTCDateTime)
    """
    Present when a participant has completed an EHR consent,
    is the timestamp of when that consent was authored
    """

    enrollmentStatusCoreMinusPMTime = Column("enrollment_status_core_minus_pm_time", UTCDateTime)
    """
    is the timestamp of when meet the CORE_MINUS_PM status criteria
    """

    # The time when we get the first stored sample
    enrollmentStatusCoreStoredSampleTime = Column("enrollment_status_core_stored_sample_time", UTCDateTime)
    """
    Present when a participant has completed all baseline modules, physical measurements, and has DNA samples stored.

    Is the latest date from the list of:

    * The earliest date of sampleStatus...Time (any of the DNA sample tests: ed10, 2ed10, 1ed04, 1sal, 1sal2))
    * enrollmentStatusMemberTime
    * questionnaireOnTheBasicsTime
    * questionnaireOnLifestyleTime
    * questionnaireOnOverallHealthTime
    * clinicPhysicalMeasurementsFinalizedTime
    * selfReportedPhysicalMeasurementsAuthored
    """

    # The time when we get a DNA order
    enrollmentStatusCoreOrderedSampleTime = Column("enrollment_status_core_ordered_sample_time", UTCDateTime)
    """
    Present when a participant has completed all baseline modules, physical measurements, and DNA samples have been
    ordered

    Is the latest date from the list of:

    * The earliest date of sampleOrderStatus...Time (any of the DNA sample tests: ed10, 2ed10, 1ed04, 1sal, 1sal2)
    * enrollmentStatusMemberTime
    * questionnaireOnTheBasicsTime
    * questionnaireOnLifestyleTime
    * questionnaireOnOverallHealthTime
    * clinicPhysicalMeasurementsFinalizedTime
    * selfReportedPhysicalMeasurementsAuthored
    """

    enrollmentStatusV3_0 = Column(
        "enrollment_status_v_3_0",
        Enum(EnrollmentStatusV30),
        default=EnrollmentStatusV30.PARTICIPANT
    )
    """Participant's current enrollment status as defined by the 3.0 data glossary"""

    enrollmentStatusParticipantV3_0Time = Column("enrollment_status_participant_v_3_0_time", UTCDateTime)
    """UTC time the participant has reached the 'PARTICIPANT' enrollment status defined by the 3.0 data glossary"""

    enrollmentStatusParticipantPlusEhrV3_0Time = Column(
        "enrollment_status_participant_plus_ehr_v_3_0_time",
        UTCDateTime
    )
    """
    UTC time the participant has reached the 'PARTICIPANT_PLUS_EHR' enrollment status defined by the 3.0 data glossary
    """

    enrollmentStatusPmbEligibleV3_0Time = Column("enrollment_status_pmb_eligible_v_3_0_time", UTCDateTime)
    """
    UTC time the participant has reached the 'PARTICIPANT_PMB_ELIGIBLE'
    enrollment status defined by the 3.0 data glossary
    """

    enrollmentStatusCoreMinusPmV3_0Time = Column("enrollment_status_core_minus_pm_v_3_0_time", UTCDateTime)
    """UTC time the participant has reached the 'CORE_MINUS_PM' enrollment status defined by the 3.0 data glossary"""

    enrollmentStatusCoreV3_0Time = Column("enrollment_status_core_v_3_0_time", UTCDateTime)
    """UTC time the participant has reached the 'CORE_PARTICIPANT' enrollment status defined by the 3.0 data glossary"""

    enrollmentStatusV3_1 = Column(
        "enrollment_status_v_3_1",
        Enum(EnrollmentStatusV31),
        default=EnrollmentStatusV31.PARTICIPANT
    )
    """Participant's current enrollment status as defined by the 3.1 data glossary"""

    enrollmentStatusParticipantV3_1Time = Column("enrollment_status_participant_v_3_1_time", UTCDateTime)
    """UTC time the participant has reached the 'PARTICIPANT' enrollment status defined by the 3.1 data glossary"""

    enrollmentStatusParticipantPlusEhrV3_1Time = Column(
        "enrollment_status_participant_plus_ehr_v_3_1_time",
        UTCDateTime
    )
    """
    UTC time the participant has reached the 'PARTICIPANT_PLUS_EHR' enrollment status defined by the 3.1 data glossary
    """

    enrollmentStatusParticipantPlusBasicsV3_1Time = Column(
        "enrollment_status_participant_plus_basics_v_3_1_time",
        UTCDateTime
    )
    """
    UTC time the participant has reached the 'PARTICIPANT_PLUS_BASICS'
    enrollment status defined by the 3.1 data glossary
    """

    enrollmentStatusCoreMinusPmV3_1Time = Column("enrollment_status_core_minus_pm_v_3_1_time", UTCDateTime)
    """UTC time the participant has reached the 'CORE_MINUS_PM' enrollment status defined by the 3.1 data glossary"""

    enrollmentStatusCoreV3_1Time = Column("enrollment_status_core_v_3_1_time", UTCDateTime)
    """UTC time the participant has reached the 'CORE_PARTICIPANT' enrollment status defined by the 3.1 data glossary"""

    enrollmentStatusParticipantPlusBaselineV3_1Time = Column(
        "enrollment_status_participant_plus_baseline_v_3_1_time",
        UTCDateTime
    )
    """
    UTC time the participant has reached the 'BASELINE_PARTICIPANT' enrollment status defined by the 3.1 data glossary
    """

    consentCohort = Column("consent_cohort", Enum(ParticipantCohort), default=ParticipantCohort.UNSET)
    """
    Cohort assignment based on the date the participant enrolled in the program.

    :ref:`Enumerated values <consent_cohort>`
    """

    cohort2PilotFlag = Column(
        "cohort_2_pilot_flag", Enum(ParticipantCohortPilotFlag), default=ParticipantCohortPilotFlag.UNSET
    )
    """
    Indicates whether a participant was designated for the Genomics pilot.
    The pilot participants were only drawn from Cohort 2.

    :ref:`Enumerated values <cohort_2_pilot_flag>`
    """

    # EHR status related columns
    ehrStatus = Column("ehr_status", Enum(EhrStatus), default=EhrStatus.NOT_PRESENT)
    """
    .. warning::
        DEPRECATED - use :py:attr:`wasEhrDataAvailable` instead.
    @deprecated Use wasEhrDataAvailable (was_ehr_data_available) instead

    Indicates whether Electronic Health Records (EHR) have ever been present for the participant.

    :ref:`Enumerated values <ehr_status>`
    """

    ehrReceiptTime = Column("ehr_receipt_time", UTCDateTime)
    """
    .. warning::
        DEPRECATED - use :py:attr:`firstEhrReceiptTime` instead.

    UTC timestamp indicating the first upload timestamp of an EHR file for the participant
    """

    ehrUpdateTime = Column("ehr_update_time", UTCDateTime)
    """
    .. warning::
        DEPRECATED - use :py:attr:`latestEhrReceiptTime` instead.

    UTC timestamp indicating the most recent upload timestamp of an EHR file for the participant
    """

    isEhrDataAvailable = Column(
        "is_ehr_data_available",
        Boolean,
        nullable=False,
        server_default=expression.false()
    )
    """
    A true or false value that indicates whether Electronic Health Records (EHR)
    are currently present for the participant.
    """

    wasEhrDataAvailable = Column(
        "was_ehr_data_available",
        Boolean,
        Computed(ehrStatus == EhrStatus.PRESENT, persisted=True)
    )
    """
    A true or false value that indicates whether Electronic Health Records (EHR)
    have ever been present for the participant.
    """

    firstEhrReceiptTime = None  # Placeholder filled in by the DAO using the value in ehrReceiptTime
    """
    UTC timestamp indicating when RDR was first made aware of signed and uploaded EHR documents
    """

    latestEhrReceiptTime = None  # Placeholder filled in by the DAO using the value in ehrUpdateTime
    """
    UTC timestamp indicating the latest time RDR was aware of signed and uploaded EHR documents
    """

    # DA-3156:  Separate tracking for participant-mediated EHR (e.g., from CE participants)
    # These values will be backfilled based on a report of mediated EHR activity imported into a temp table
    wasParticipantMediatedEhrAvailable = Column(
        "was_participant_mediated_ehr_available",
        Boolean,
        nullable=False,
        server_default=expression.false()
    )
    """
    A true or false value that indicates whether participant-mediated Electronic Health Records (EHR)
    have ever been present for the participant.  Mediated EHR is a separate EHR source than HPO-provided EHR
    """

    firstParticipantMediatedEhrReceiptTime =  Column("first_participant_mediated_ehr_receipt_time", UTCDateTime)
    """
    UTC timestamp indicating first reported occurrence of participant-mediated EHR content
    """

    latestParticipantMediatedEhrReceiptTime = Column("latest_participant_mediated_ehr_receipt_time", UTCDateTime)
    """
    UTC timestamp indicating the latest reported occurrence of participant-mediated EHR content
    """

    healthDataStreamSharingStatusV3_1 = Column(
        'health_data_stream_sharing_status_v_3_1',
        Enum(DigitalHealthSharingStatusV31),
        Computed(
            case(
                [
                    (isEhrDataAvailable, int(DigitalHealthSharingStatusV31.CURRENTLY_SHARING)),
                    (wasEhrDataAvailable, int(DigitalHealthSharingStatusV31.EVER_SHARED)),
                    (wasParticipantMediatedEhrAvailable, int(DigitalHealthSharingStatusV31.EVER_SHARED))
                ],
                else_=int(DigitalHealthSharingStatusV31.NEVER_SHARED)
            ),
            persisted=True
        )
    )

    # If both ehrUpdateTime and latestParticipantMediatedEhrReceiptTime are null, result is null
    # If one is null, result is the non-null timestamp
    # If both are non-null, result is the most recent (GREATEST) timestamp
    healthDataStreamSharingStatusV3_1Time = Column(
        'health_data_stream_sharing_status_v_3_1_time',
        UTCDateTime,
        Computed(func.nullif(func.greatest(func.coalesce(ehrUpdateTime, 0),
                                           func.coalesce(latestParticipantMediatedEhrReceiptTime, 0)
                                           ),
                             0), persisted=True)
    )

    clinicPhysicalMeasurementsStatus = Column(
        "clinic_physical_measurements_status", Enum(PhysicalMeasurementsStatus),
        default=PhysicalMeasurementsStatus.UNSET
    )
    """
    Indicates whether this participant has completed physical measurements.

    :ref:`Enumerated values <clinic_physical_measurements_status>`
    """

    # The first time that physical measurements were submitted for the participant.
    clinicPhysicalMeasurementsTime = Column("clinic_physical_measurements_time", UTCDateTime)
    """Indicates the latest time physical measurements were submitted for the participant"""

    # The time that physical measurements were finalized (before submission to the RDR)
    clinicPhysicalMeasurementsFinalizedTime = Column("clinic_physical_measurements_finalized_time", UTCDateTime)
    """Indicates the latest time physical measurements were finalized for the participant"""

    clinicPhysicalMeasurementsCreatedSiteId = Column(
        "clinic_physical_measurements_created_site_id", Integer, ForeignKey("site.site_id")
    )
    """An indicator for the site where the physical measurements were created for each participant"""
    clinicPhysicalMeasurementsCreatedSite = None  # placeholder for docs, API sets on model using corresponding ID field
    """An indicator for the site where the physical measurements were created for each participant"""

    clinicPhysicalMeasurementsFinalizedSiteId = Column(
        "clinic_physical_measurements_finalized_site_id", Integer, ForeignKey("site.site_id")
    )
    """An indicator for the site where the physical measurements were finalized for each participant"""
    clinicPhysicalMeasurementsFinalizedSite = None
    # placeholder for docs, API sets on model using corresponding ID field
    """An indicator for the site where the physical measurements were finalized for each participant"""

    selfReportedPhysicalMeasurementsStatus = Column("self_reported_physical_measurements_status",
                                                    Enum(SelfReportedPhysicalMeasurementsStatus),
                                                    default=SelfReportedPhysicalMeasurementsStatus.UNSET)
    """
    Indicates whether this participant has completed self-reported physical measurements

    :ref:`Enumerated values <self_reported_physical_measurements_status>`
    """
    selfReportedPhysicalMeasurementsAuthored = Column("self_reported_physical_measurements_authored", UTCDateTime)
    """Indicates the latest time the participant authored the survey for self-reporting physical measurements"""

    numberDistinctVisits = Column("number_distinct_visits", Integer, default=0)
    """The number of distinct visits to a health care provider that the participant has made that supplied data"""

    signUpTime = Column("sign_up_time", UTCDateTime)
    """The time at which the participant initially signed up for All Of Us"""

    withdrawalStatus = Column("withdrawal_status", Enum(WithdrawalStatus), nullable=False)
    """
    Indicates whether the participant has withdrawn from the study and does not want their data used in future.

    :ref:`Enumerated values <withdrawal_status>`
    """

    withdrawalReason = Column("withdrawal_reason", Enum(WithdrawalReason))
    """
    If withdrawalReason is UNSET the participant is self withdrawn,
    any other enumeration means the participant was administratively withdrawn.

    :ref:`Enumerated values <withdrawal_reason>`
    """

    withdrawalTime = Column("withdrawal_time", UTCDateTime)
    """
    The date and time at which the participant withdrew from the study
    (48 hour delay from the real time the participant clicked the withdraw button)
    """

    withdrawalAuthored = Column("withdrawal_authored", UTCDateTime)
    """The actual time at which the participant chose to stop participating in the Participant Portal"""

    withdrawalReasonJustification = Column("withdrawal_reason_justification", UnicodeText)
    """
    Related to administrative withdrawals, used when withdrawal_reason is not unset;
    allows for additional explanation related to withdrawal reason
    """

    suspensionStatus = Column("suspension_status", Enum(SuspensionStatus), nullable=False)
    """
    Indicates whether the participant has indicated they do not want to be contacted anymore;
    also shouldn't have any EHR data transferred after the given suspension date

    :ref:`Enumerated values <suspension_status>`
    """

    suspensionTime = Column("suspension_time", UTCDateTime)
    """
    The date and time at which the participant has indicated they do not want to be contacted anymore;
    also shouldn't have any EHR data transferred after the given suspension date
    """

    # The originating resource for participant, this (unlike clientId) will not change.
    participantOrigin = Column("participant_origin", String(80), nullable=False)
    """
    The sign up portal the participant used to enroll (Vibrent, Care Evolution).
    @rdr_dictionary_show_unique_values
    """

    # Note: leaving for future use if we go back to using a relationship to PatientStatus table.
    # # patientStatuses = relationship("PatientStatus", back_populates="participantSummary")
    # patientStatus = relationship(
    #   "PatientStatus",
    #   primaryjoin="PatientStatus.participantId == ParticipantSummary.participantId",
    #   foreign_keys=participantId,
    #   remote_side="PatientStatus.participantId",
    #   viewonly=True,
    #   uselist=True
    # )
    patientStatus = Column("patient_status", JSON, nullable=True, default=list())
    """
    A flag available for sites of in person enrollment. A participant can have a status from multiple sites.  Example:

    .. code-block:: json

        "patientStatus": {
            “PITT_UPMC”: “YES”,
            “PITT_TEMPLE”: “NO_ACCESS”,
            “PITT_SOMETHING”: “NO”
        }

    .. note::
        The following values are available.

        * Yes: Confirmed in EHR system.
        * No: Not found in EHR system.
        * No Access: Unable to check EHR system.
        * Unknown: Inconclusive search results.
        * Not Applicable (will apply to DVs only).
    """

    digitalHealthSharingStatus = Column("digital_health_sharing_status", JSON, nullable=True)
    """
    This field indicates the digital health sharing status for Fitbit, Apple HealthKit and Apple EHR.
    This field is a Json value with and current status and authored date, and also with all the consent histories.

    .. code-block:: json
        "digitalHealthSharingStatus": {
           "fitbit": {
             "status": "YES",
             "authoredTime": "YYYY-MM-DDThh:mm:ssZ"
             "history": [
                {
                  "status": "YES",
                  "authoredTime": "YYYY-MM-DDThh:mm:ssZ"
                },
                {
                  "status": "NO",
                  "authoredTime": "YYYY-MM-DDThh:mm:ssZ"
                },
                ...
              ]
           },
           "appleHealthKit": {
             "status": "YES",
             "authoredTime": "YYYY-MM-DDThh:mm:ssZ"
             "history": [
                {
                  "status": "YES",
                  "authoredTime": "YYYY-MM-DDThh:mm:ssZ"
                },
                {
                  "status": "NO",
                  "authoredTime": "YYYY-MM-DDThh:mm:ssZ"
                },
                ...
              ]
           },
           "appleEHR": {
             "status": "YES",
             "authoredTime": "YYYY-MM-DDThh:mm:ssZ"
             "history": [
                {
                  "status": "YES",
                  "authoredTime": "YYYY-MM-DDThh:mm:ssZ"
                },
                {
                  "status": "NO",
                  "authoredTime": "YYYY-MM-DDThh:mm:ssZ"
                },
                ...
              ]
           }
        }

    .. note::
        The following values are available.

        * YES: start sharing
        * NO: stop sharing
    """

    # Fields for which questionnaires have been submitted, and at what times.
    consentForStudyEnrollment = Column(
        "consent_for_study_enrollment", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates whether enrollment consent has been received

    :ref:`Enumerated values <questionnaire_status>`
    """

    consentForStudyEnrollmentTime = Column("consent_for_study_enrollment_time", UTCDateTime)
    """UTC timestamp indicating the time at which enrollment consent has been received by RDR (ISO-8601 time)"""

    consentForStudyEnrollmentAuthored = Column("consent_for_study_enrollment_authored", UTCDateTime)
    """The UTC date time of the latest time participant completed the survey, regardless of when it was sent to RDR"""

    consentForStudyEnrollmentFirstYesAuthored = Column("consent_for_study_enrollment_first_yes_authored", UTCDateTime)
    "The UTC date time of the first time the participant completed the survey, regardless of when it was sent to RDR"

    semanticVersionForPrimaryConsent = Column("semantic_version_for_primary_consent", String(100))
    """The human readable version of primary consent the participant signed"""

    reconsentForStudyEnrollmentAuthored = Column("reconsent_for_study_enrollment_authored", UTCDateTime)
    """
    The UTC date time of when the participant re-consented to the program
    (if a reconsent was performed for this participant)
    """

    consentForElectronicHealthRecords = Column(
        "consent_for_electronic_health_records", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates whether electronic health records (EHR) consent has been received

    :ref:`Enumerated values <questionnaire_status>`
    """

    consentForElectronicHealthRecordsTime = Column("consent_for_electronic_health_records_time", UTCDateTime)
    """Indicates the time at which the RDR received notice of consentForElectronicHealthRecords."""

    consentForElectronicHealthRecordsAuthored = Column("consent_for_electronic_health_records_authored", UTCDateTime)
    "Indicates the latest time at which the participant completed consent, regardless of when it was sent to RDR."

    consentForElectronicHealthRecordsFirstYesAuthored = Column(
        "consent_for_electronic_health_records_first_yes_authored",
        UTCDateTime
    )
    "Indicates the first time at which the participant consented with Yes"

    ehrConsentExpireStatus = Column("ehr_consent_expire_status", Enum(ConsentExpireStatus),
                                    default=ConsentExpireStatus.UNSET)
    """
    Indicates whether the EHR consent has expired per rules for impacted states (Maine, Maryland, Montana, Wyoming)
    For HPO participants, the EHR consent is based on the HPO state and not the participant's residence.

    :ref:`Enumerated values <ehr_consent_expire_status>`
    """
    ehrConsentExpireTime = Column("ehr_consent_expire_time", UTCDateTime)
    """
    Indicates the time at which the RDR received notice of the EHR consent expiration
    which may be subject to expiration in certain states
    """

    ehrConsentExpireAuthored = Column("ehr_consent_expire_authored", UTCDateTime)
    """
    Indicates the time at which the participant completed an EHR consent
    which may be subject to expiration in certain states
    """

    reconsentForElectronicHealthRecordsAuthored = Column(
        "reconsent_for_electronic_health_records_authored",
        UTCDateTime
    )
    """
    The UTC date time of when the participant re-consented for sharing electronic health records
    (if a reconsent was performed for this participant)
    """

    consentForDvElectronicHealthRecordsSharing = Column(
        "consent_for_dv_electronic_health_records_sharing",
        Enum(QuestionnaireStatus),
        default=QuestionnaireStatus.UNSET,
    )
    """
    Indicates whether direct-volunteer electronic health record sharing consent has been received

    :ref:`Enumerated values <questionnaire_status>`
    """

    consentForDvElectronicHealthRecordsSharingTime = Column(
        "consent_for_dv_electronic_health_records_sharing_time", UTCDateTime
    )
    """Indicates the time at which the RDR received notice of consentForDvElectronicHealthRecordsSharing"""

    consentForDvElectronicHealthRecordsSharingAuthored = Column(
        "consent_for_dv_electronic_health_records_sharing_authored", UTCDateTime
    )
    "Indicates the time at which the participant completed consent, regardless of when it was sent to RDR"

    consentForGenomicsROR = Column("consent_for_genomics_ror", Enum(QuestionnaireStatus),
                                   default=QuestionnaireStatus.UNSET)
    """
    Indicates whether genomic return of results consent has been received

    :ref:`Enumerated values <questionnaire_status>`
    """

    consentForGenomicsRORTime = Column("consent_for_genomics_ror_time", UTCDateTime)
    "Indicates the time the genomic return of results was received by the RDR"

    consentForGenomicsRORAuthored = Column("consent_for_genomics_ror_authored", UTCDateTime)
    "Indicates the time the participant signed the genomic return of results"

    consentForCABoR = Column("consent_for_cabor", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET)
    """
    Indicates whether the participant has consented to the California Bill of Rights consent questionnaire

    :ref:`Enumerated values <questionnaire_status>`
    """

    consentForCABoRTime = Column("consent_for_cabor_time", UTCDateTime)
    """Indicates the time at which the RDR received notice of consentForCABoR"""

    consentForCABoRAuthored = Column("consent_for_cabor_authored", UTCDateTime)
    """
    Indicates the time at which the participant completed California Bill of Rights consent,
    regardless of when it was sent to RDR
    """

    consentForEtM = Column("consent_for_etm", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET)
    """
    Indicates whether the participant has consented to the Exploring the Mind consent questionnaire

    :ref:`Enumerated values <questionnaire_status>`
    """

    consentForEtMTime = Column("consent_for_etm_time", UTCDateTime)
    """Indicates the time at which the RDR received notice of consentForEtM"""

    consentForEtMAuthored = Column("consent_for_etm_authored", UTCDateTime)
    """
    Indicates the time at which the participant completed Exploring the Mind consent,
    regardless of when it was sent to RDR
    """

    questionnaireOnOverallHealth = Column(
        "questionnaire_on_overall_health", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates status for Overall Health PPI module

    :ref:`Enumerated values <questionnaire_status>`
    """

    questionnaireOnOverallHealthTime = Column("questionnaire_on_overall_health_time", UTCDateTime)
    "Indicates the time at which the RDR received notice of overall health questionnaire"

    questionnaireOnOverallHealthAuthored = Column("questionnaire_on_overall_health_authored", UTCDateTime)
    "Indicates the time at which the participant completed the overall health questionnaire"

    questionnaireOnLifestyle = Column(
        "questionnaire_on_lifestyle", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates the status of a questionnaire on lifestyle

    :ref:`Enumerated values <questionnaire_status>`
    """

    questionnaireOnLifestyleTime = Column("questionnaire_on_lifestyle_time", UTCDateTime)
    "Indicates the time at which the RDR received notice of lifestyle questionnaire"

    questionnaireOnLifestyleAuthored = Column("questionnaire_on_lifestyle_authored", UTCDateTime)
    "Indicates the time at which the participant completed the lifestyle questionnaire"

    questionnaireOnTheBasics = Column(
        "questionnaire_on_the_basics", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates the status of a questionnaire on TheBasics that a participant can fill out.

    :ref:`Enumerated values <questionnaire_status>`
    """

    questionnaireOnTheBasicsTime = Column("questionnaire_on_the_basics_time", UTCDateTime)
    "The UTC Date time of when the RDR received the basics questionnaire."

    questionnaireOnTheBasicsAuthored = Column("questionnaire_on_the_basics_authored", UTCDateTime)
    "The UTC Date time of when the participant completed the basics questionnaire."

    baselineQuestionnairesFirstCompleteAuthored = Column("baseline_questionnaires_first_complete_authored", UTCDateTime)
    "The UTC Date time of when the participant first time completed all the baseline questionnaire."

    questionnaireOnHealthcareAccess = Column(
        "questionnaire_on_healthcare_access", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates status of a questionnaire on HealthcareAccess that a participant can fill out.

    :ref:`Enumerated values <questionnaire_status>`
    """

    questionnaireOnHealthcareAccessTime = Column("questionnaire_on_healthcare_access_time", UTCDateTime)
    "Indicates the time at which the RDR received notice of health care access questionnaire."

    questionnaireOnHealthcareAccessAuthored = Column("questionnaire_on_healthcare_access_authored", UTCDateTime)
    "Indicates the time at which the participant completed the health care access questionnaire."

    questionnaireOnMedicalHistory = Column(
        "questionnaire_on_medical_history", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates the status of a questionnaire on MedicalHistory that a participant can fill out.

    :ref:`Enumerated values <questionnaire_status>`
    """

    questionnaireOnMedicalHistoryTime = Column("questionnaire_on_medical_history_time", UTCDateTime)
    "Indicates the time at which the RDR received notice of medical history questionnaire"

    questionnaireOnMedicalHistoryAuthored = Column("questionnaire_on_medical_history_authored", UTCDateTime)
    "Indicates the time at which the participant completed the medical history questionnaire"

    questionnaireOnMedications = Column(
        "questionnaire_on_medications", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates status of a questionnaire on Medications that a participant can fill out.

    :ref:`Enumerated values <questionnaire_status>`
    """

    questionnaireOnMedicationsTime = Column("questionnaire_on_medications_time", UTCDateTime)
    "Indicates the time at which the RDR received notice of medications questionnaire."

    questionnaireOnMedicationsAuthored = Column("questionnaire_on_medications_authored", UTCDateTime)
    "Indicates the time at which the participant completed the medications questionnaire."

    questionnaireOnFamilyHealth = Column(
        "questionnaire_on_family_health", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates the status of a questionnaire on FamilyHealth that a participant can fill out.

    :ref:`Enumerated values <questionnaire_status>`
    """

    questionnaireOnFamilyHealthTime = Column("questionnaire_on_family_health_time", UTCDateTime)
    "Indicates the time at which the RDR received notice of family health questionnaire."

    questionnaireOnFamilyHealthAuthored = Column("questionnaire_on_family_health_authored", UTCDateTime)
    "Indicates the time at which the participant completed the family health questionnaire."

    questionnaireOnSocialDeterminantsOfHealth = Column(
        "questionnaire_on_social_determinants_of_health", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates the status of a questionnaire on SocialDeterminantsOfHealth that a participant can fill out.

    :ref:`Enumerated values <questionnaire_status>`
    """

    questionnaireOnSocialDeterminantsOfHealthTime = Column("questionnaire_on_social_determinants_of_health_time",
                                                           UTCDateTime)
    "Indicates the time at which the RDR received notice of social determinants of health questionnaire."

    questionnaireOnSocialDeterminantsOfHealthAuthored = \
        Column("questionnaire_on_social_determinants_of_health_authored", UTCDateTime)
    "Indicates the time at which the participant completed the social determinants of health questionnaire."

    questionnaireOnPersonalAndFamilyHealthHistory = Column(
        "questionnaire_on_personal_and_family_health_history", Enum(QuestionnaireStatus),
        default=QuestionnaireStatus.UNSET
    )
    """
    Indicates the status of a questionnaire on FamilyAndPersonalHealthHistory that a participant can fill out.

    :ref:`Enumerated values <questionnaire_status>`
    """

    questionnaireOnPersonalAndFamilyHealthHistoryTime = \
        Column("questionnaire_on_personal_and_family_health_history_time", UTCDateTime)
    "Indicates the time at which the RDR received notice of family and personal health history questionnaire."

    questionnaireOnPersonalAndFamilyHealthHistoryAuthored = \
        Column("questionnaire_on_personal_and_family_health_history_authored", UTCDateTime)
    "Indicates the time at which the participant completed the family and personal health history questionnaire."

    questionnaireOnCopeMay = Column(
        "questionnaire_on_cope_may", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    questionnaireOnCopeJune = Column(
        "questionnaire_on_cope_june", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    questionnaireOnCopeJuly = Column(
        "questionnaire_on_cope_july", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    questionnaireOnCopeNov = Column(
        "questionnaire_on_cope_nov", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    questionnaireOnCopeDec = Column(
        "questionnaire_on_cope_dec", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    questionnaireOnCopeFeb = Column(
        "questionnaire_on_cope_feb", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates the status of a periodic questionnaire on COVID Participant Experience (COPE)
    that a participant can fill out.

    :ref:`Enumerated values <questionnaire_status>`
    """

    questionnaireOnCopeMayTime = Column("questionnaire_on_cope_may_time", UTCDateTime)
    questionnaireOnCopeJuneTime = Column("questionnaire_on_cope_june_time", UTCDateTime)
    questionnaireOnCopeJulyTime = Column("questionnaire_on_cope_july_time", UTCDateTime)
    questionnaireOnCopeNovTime = Column("questionnaire_on_cope_nov_time", UTCDateTime)
    questionnaireOnCopeDecTime = Column("questionnaire_on_cope_dec_time", UTCDateTime)
    questionnaireOnCopeFebTime = Column("questionnaire_on_cope_feb_time", UTCDateTime)
    "Indicates the time at which the RDR received notice of the specified COPE questionnaire."

    questionnaireOnCopeMayAuthored = Column("questionnaire_on_cope_may_authored", UTCDateTime)
    questionnaireOnCopeJuneAuthored = Column("questionnaire_on_cope_june_authored", UTCDateTime)
    questionnaireOnCopeJulyAuthored = Column("questionnaire_on_cope_july_authored", UTCDateTime)
    questionnaireOnCopeNovAuthored = Column("questionnaire_on_cope_nov_authored", UTCDateTime)
    questionnaireOnCopeDecAuthored = Column("questionnaire_on_cope_dec_authored", UTCDateTime)
    questionnaireOnCopeFebAuthored = Column("questionnaire_on_cope_feb_authored", UTCDateTime)
    "Indicates the time at which the participant completed the specified COPE questionnaire."

    questionnaireOnCopeVaccineMinute1 = Column(
        "questionnaire_on_cope_vaccine_minute_1", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    "Indicates whether the participant has submitted a response to the first COPE Covid Vaccine Minute survey"

    questionnaireOnCopeVaccineMinute1Authored = Column("questionnaire_on_cope_vaccine_minute_1_authored", UTCDateTime)
    "Indicates the time at which the participant completed the first COPE Covid Vaccine Minute survey"

    questionnaireOnCopeVaccineMinute2 = Column(
        "questionnaire_on_cope_vaccine_minute_2", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    "Indicates whether the participant has submitted a response to the second COPE Covid Vaccine Minute survey"

    questionnaireOnCopeVaccineMinute2Authored = Column("questionnaire_on_cope_vaccine_minute_2_authored", UTCDateTime)
    "Indicates the time at which the participant completed the second COPE Covid Vaccine Minute survey"

    questionnaireOnCopeVaccineMinute3 = Column(
        "questionnaire_on_cope_vaccine_minute_3", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    "Indicates whether the participant has submitted a response to the third COPE Covid Vaccine Minute survey"

    questionnaireOnCopeVaccineMinute3Authored = Column("questionnaire_on_cope_vaccine_minute_3_authored", UTCDateTime)
    "Indicates the time at which the participant completed the third COPE Covid Vaccine Minute survey"

    questionnaireOnCopeVaccineMinute4 = Column(
        "questionnaire_on_cope_vaccine_minute_4", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    "Indicates whether the participant has submitted a response to the fourth COPE Covid Vaccine Minute survey"

    questionnaireOnCopeVaccineMinute4Authored = Column("questionnaire_on_cope_vaccine_minute_4_authored", UTCDateTime)
    "Indicates the time at which the participant completed the fourth COPE Covid Vaccine Minute survey"

    questionnaireOnDnaProgram = Column(
        "questionnaire_on_dna_program", Enum(QuestionnaireStatus), default=QuestionnaireStatus.UNSET
    )
    """
    Indicates the status of a questionnaire of the DNA program that a participant can fill out

    :ref:`Enumerated values <questionnaire_status>`
    """

    questionnaireOnDnaProgramAuthored = Column("questionnaire_on_dna_program_authored", UTCDateTime)
    "The UTC Date time of when the participant completed the DNA program questionnaire"

    questionnaireOnLifeFunctioning = Column("questionnaire_on_life_functioning", Enum(QuestionnaireStatus),
                                            default=QuestionnaireStatus.UNSET)
    """
    Indicates the status of the life functioning survey questionnaire that a participant can fill out

    :ref:`Enumerated values <questionnaire_status>`
    """
    questionnaireOnLifeFunctioningTime = Column("questionnaire_on_life_functioning_time", UTCDateTime)
    "Indicates the time at which the RDR received notice of life functioning survey questionnaire."

    questionnaireOnLifeFunctioningAuthored = Column("questionnaire_on_life_functioning_authored", UTCDateTime)
    "The UTC Date time of when the participant completed the life functioning survey questionnaire"

    numCompletedBaselinePPIModules = Column("num_completed_baseline_ppi_modules", SmallInteger, default=0)
    """
    The count of how many of [questionnaireOnTheBasics, questionnaireOnOverallHealth, questionnaireOnLifestyle]
    the participant has completed.
    """
    numCompletedPPIModules = Column("num_completed_ppi_modules", SmallInteger, default=0)
    """The count of all PPI modules the participant has completed."""

    biospecimenStatus = Column("biospecimen_status", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    An indicator for whether biospecimens have been finalized for the participant

    :ref:`Enumerated values <biospecimen_status>`
    """
    biospecimenOrderTime = Column("biospecimen_order_time", UTCDateTime)
    """The first time at which the biospecimens were finalized in UTC."""

    biospecimenSourceSiteId = Column("biospecimen_source_site_id", Integer, ForeignKey("site.site_id"))
    """The site where the biospecimens were initially created for the participant"""
    biospecimenSourceSite = None  # placeholder for docs, API sets on model using corresponding ID field
    """The site where the biospecimens were initially created for the participant"""

    biospecimenCollectedSiteId = Column("biospecimen_collected_site_id", Integer, ForeignKey("site.site_id"))
    """The site where the biospecimens were initially collected for the participant"""
    biospecimenCollectedSite = None  # placeholder for docs, API sets on model using corresponding ID field
    """The site where the biospecimens were initially collected for the participant"""

    biospecimenProcessedSiteId = Column("biospecimen_processed_site_id", Integer, ForeignKey("site.site_id"))
    """The site where the biospecimens were initially processed for the participant"""
    biospecimenProcessedSite = None  # placeholder for docs, API sets on model using corresponding ID field
    """The site where the biospecimens were initially processed for the participant"""

    biospecimenFinalizedSiteId = Column("biospecimen_finalized_site_id", Integer, ForeignKey("site.site_id"))
    """The site where the biospecimens were initially finalized for the participant"""
    biospecimenFinalizedSite = None  # placeholder for docs, API sets on model using corresponding ID field
    """The site where the biospecimens were initially finalized for the participant"""

    # Fields for which samples have been received, and at what times.
    sampleStatus1SST8 = Column("sample_status_1sst8", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1SST8.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1SST8Time = Column("sample_status_1sst8_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus2SST8 = Column("sample_status_2sst8", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 2SST8.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus2SST8Time = Column("sample_status_2sst8_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1SS08 = Column("sample_status_1ss08", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1SS08.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1SS08Time = Column("sample_status_1ss08_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1PST8 = Column("sample_status_1pst8", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1PST8.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1PST8Time = Column("sample_status_1pst8_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus2PST8 = Column("sample_status_2pst8", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 2PST8.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus2PST8Time = Column("sample_status_2pst8_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1PS08 = Column("sample_status_1ps08", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1PS08.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1PS08Time = Column("sample_status_1ps08_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1HEP4 = Column("sample_status_1hep4", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1HEP4.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1HEP4Time = Column("sample_status_1hep4_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1ED04 = Column("sample_status_1ed04", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1ED04.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1ED04Time = Column("sample_status_1ed04_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1ED10 = Column("sample_status_1ed10", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1ED10.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1ED10Time = Column("sample_status_1ed10_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus2ED10 = Column("sample_status_2ed10", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 2ED10.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus2ED10Time = Column("sample_status_2ed10_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1UR10 = Column("sample_status_1ur10", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1UR10.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1UR10Time = Column("sample_status_1ur10_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1UR90 = Column("sample_status_1ur90", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1UR90.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1UR90Time = Column("sample_status_1ur90_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1SAL = Column("sample_status_1sal", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1SAL.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1SALTime = Column("sample_status_1sal_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1SAL2 = Column("sample_status_1sal2", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1SAL2.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1SAL2Time = Column("sample_status_1sal2_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sample1SAL2CollectionMethod = Column(
        "sample_1sal2_collection_method",
        Enum(SampleCollectionMethod),
        default=SampleCollectionMethod.UNSET
    )
    """
    Gives how the 1SAL2 sample was collected (ie on site or using a mail kit)

    :ref:`Enumerated values <sample_collection_method>`
    """

    sampleStatus1ED02 = Column("sample_status_1ed02", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1ED02.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1ED02Time = Column("sample_status_1ed02_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1CFD9 = Column("sample_status_1cfd9", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1CFD9.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1CFD9Time = Column("sample_status_1cfd9_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleStatus1PXR2 = Column("sample_status_1pxr2", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample 1PXR2.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatus1PXR2Time = Column("sample_status_1pxr2_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."


    # Sample fields for Direct Volunteers
    # These are deprecated in favor of using the standard samplestatus2sal2, etc.
    sampleStatusDV1SAL2 = Column("sample_status_dv_1sal2", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The result of biobank processing on sample DV1SAL2.

    :ref:`Enumerated values <sample_status>`
    """

    sampleStatusDV1SAL2Time = Column("sample_status_dv_1sal2_time", UTCDateTime)
    "The datetime in UTC in which the biobank processed the sample."

    sampleOrderStatusDV1SAL2 = Column("sample_order_status_dv_1sal2", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample DV1SAL2.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatusDV1SAL2Time = Column("sample_order_status_dv_1sal2_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1SST8 = Column("sample_order_status_1sst8", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1SST8.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1SST8Time = Column("sample_order_status_1sst8_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus2SST8 = Column("sample_order_status_2sst8", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 2SST8.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus2SST8Time = Column("sample_order_status_2sst8_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1SS08 = Column("sample_order_status_1ss08", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1SS08.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1SS08Time = Column("sample_order_status_1ss08_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1PST8 = Column("sample_order_status_1pst8", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1PST8.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1PST8Time = Column("sample_order_status_1pst8_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus2PST8 = Column("sample_order_status_2pst8", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 2PST8.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus2PST8Time = Column("sample_order_status_2pst8_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1PS08 = Column("sample_order_status_1ps08", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1PS08.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1PS08Time = Column("sample_order_status_1ps08_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1HEP4 = Column("sample_order_status_1hep4", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1HEP4.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1HEP4Time = Column("sample_order_status_1hep4_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1ED04 = Column("sample_order_status_1ed04", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1ED04.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1ED04Time = Column("sample_order_status_1ed04_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1ED10 = Column("sample_order_status_1ed10", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1ED10.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1ED10Time = Column("sample_order_status_1ed10_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus2ED10 = Column("sample_order_status_2ed10", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 2ED10.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus2ED10Time = Column("sample_order_status_2ed10_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1UR10 = Column("sample_order_status_1ur10", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1UR10.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1UR10Time = Column("sample_order_status_1ur10_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1UR90 = Column("sample_order_status_1ur90", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1UR90.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1UR90Time = Column("sample_order_status_1ur90_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1SAL = Column("sample_order_status_1sal", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1SAL.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1SALTime = Column("sample_order_status_1sal_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1SAL2 = Column("sample_order_status_1sal2", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1SAL2.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1SAL2Time = Column("sample_order_status_1sal2_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1ED02 = Column("sample_order_status_1ed02", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1ED02.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1ED02Time = Column("sample_order_status_1ed02_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1CFD9 = Column("sample_order_status_1cfd9", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1CFD9.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1CFD9Time = Column("sample_order_status_1cfd9_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."

    sampleOrderStatus1PXR2 = Column("sample_order_status_1pxr2", Enum(OrderStatus), default=OrderStatus.UNSET)
    """
    The individual order status of sample 1PXR2.

    :ref:`Enumerated values <sample_order_status>`
    """

    sampleOrderStatus1PXR2Time = Column("sample_order_status_1pxr2_time", UTCDateTime)
    "The time the sample was marked as finalized by the processing site."


    # The number of BiobankStoredSamples recorded for this participant, limited to those samples
    # where testCode is one of the baseline tests (listed in the config).
    numBaselineSamplesArrived = Column("num_baseline_samples_arrived", SmallInteger, default=0)
    """
    The count of samples the biobank has recorded from baseline sample list [
        1ED04, 1ED10, 1HEP4, 1PST8, 2PST8, 1SST8, 2SST8,
        1PS08, 1SS08, 1UR10, 1CFD9, 1PXR2, 1UR90, 2ED10
    ]
    """

    samplesToIsolateDNA = Column("samples_to_isolate_dna", Enum(SampleStatus), default=SampleStatus.UNSET)
    """
    The sample status of any dna retrievable samples ordered for participant.

    :ref:`Enumerated values <sample_status>`

    DNA sample test codes

    * 1ED10
    * 2ED10
    * 1ED04
    * 1SAL
    * 1SAL2
    """

    participant = relationship("Participant", back_populates="participantSummary")

    retentionEligibleStatus = Column("retention_eligible_status", Enum(RetentionStatus))
    """
    Present if a participant is considered eligible for retention or not
    :ref:`Enumerated values <retention_status>`
    """

    retentionEligibleTime = Column("retention_eligible_time", UTCDateTime)
    """
    Present the retention eligible time
    """

    lastActiveRetentionActivityTime = Column("last_active_retention_activity_time", UTCDateTime)
    """
    Present the last active retention activity time
    """

    retentionType = Column("retention_type", Enum(RetentionType), default=RetentionType.UNSET)
    """
    Present the retention type: ACTIVE, PASSIVE or ACTIVE_AND_PASSIVE
    """

    onsiteIdVerificationTime = Column("onsite_id_verification_time", UTCDateTime)
    "Timestamp of the most recent id verification"

    onsiteIdVerificationType = Column("onsite_id_verification_type", Enum(OnSiteVerificationType),
                                      default=OnSiteVerificationType.UNSET)
    """The type of ID verification used for visit
       :ref:`Enumerated values <OnSiteVerificationType>`"""
    onsiteIdVerificationVisitType = Column("onsite_id_verification_visit_type", Enum(OnSiteVerificationVisitType),
                               default=OnSiteVerificationVisitType.UNSET)
    """The type of visit on which ID verification occurred
       :ref:`Enumerated values <OnSiteVerificationVisitType>`"""
    onsiteIdVerificationUser = Column("onsite_id_verification_user", String(200))
    """User who recorded ID verification occurrence"""
    onsiteIdVerificationSite = Column("onsite_id_verification_site_id", Integer, ForeignKey("site.site_id"))
    """The site where ID verification took place"""

    remoteIdVerificationOrigin = Column("remote_id_verification_origin", String(80))
    """ The sign up portal where ID Verification took place ( Vibrent OR Care Evolution ) """

    remoteIdVerificationStatus = Column(
        "remote_id_verification_status",
        Boolean
    )
    """ A true or false value that indicates whether the ID Verification is Remote  """

    remoteIdVerifiedOn = Column("remote_id_verified_on", Date)
    """ Date of the most recent remote id verification """

    everIdVerified = Column('ever_id_verified', Boolean)
    """ Has the participant's ID been verified """

    firstIdVerifiedOn = Column("remote_id_verified_on", Date)
    """ Date of the first time the participant has their id verified """

    idVerificationOrigin = Column("id_verification_origin", Enum(IdVerificationOriginType))
    """ Was the participant ON_SITE or REMOTE """

    aian = Column(Boolean, default=0)
    """Denotes if the participants race is AI_AN (AMERICAN_INDIAN_OR_ALASKA_NATIVE)"""

    lastModified = Column("last_modified", UTCDateTime6)
    """UTC timestamp of the last time the participant summary was modified"""


Index("participant_summary_biobank_id", ParticipantSummary.biobankId)
Index("participant_summary_ln_dob", ParticipantSummary.lastName, ParticipantSummary.dateOfBirth)
Index(
    "participant_summary_ln_dob_zip",
    ParticipantSummary.lastName,
    ParticipantSummary.dateOfBirth,
    ParticipantSummary.zipCode,
)
Index(
    "participant_summary_ln_dob_fn",
    ParticipantSummary.lastName,
    ParticipantSummary.dateOfBirth,
    ParticipantSummary.firstName,
)
Index("participant_summary_hpo", ParticipantSummary.hpoId)
Index("participant_summary_hpo_fn", ParticipantSummary.hpoId, ParticipantSummary.firstName)
Index("participant_summary_hpo_ln", ParticipantSummary.hpoId, ParticipantSummary.lastName)
Index("participant_summary_hpo_dob", ParticipantSummary.hpoId, ParticipantSummary.dateOfBirth)
Index("participant_summary_hpo_race", ParticipantSummary.hpoId, ParticipantSummary.race)
Index("participant_summary_hpo_zip", ParticipantSummary.hpoId, ParticipantSummary.zipCode)
Index("participant_summary_hpo_status", ParticipantSummary.hpoId, ParticipantSummary.enrollmentStatus)
Index("participant_summary_hpo_consent", ParticipantSummary.hpoId, ParticipantSummary.consentForStudyEnrollment)
Index(
    "participant_summary_hpo_num_baseline_ppi",
    ParticipantSummary.hpoId,
    ParticipantSummary.numCompletedBaselinePPIModules,
)
Index(
    "participant_summary_hpo_num_baseline_samples",
    ParticipantSummary.hpoId,
    ParticipantSummary.numBaselineSamplesArrived,
)
Index(
    "participant_summary_hpo_withdrawal_status_time",
    ParticipantSummary.hpoId,
    ParticipantSummary.withdrawalStatus,
    ParticipantSummary.withdrawalTime,
)
Index("participant_summary_last_modified", ParticipantSummary.hpoId, ParticipantSummary.lastModified)
Index("participant_summary_email", ParticipantSummary.email)
Index("participant_summary_login_phone_number", ParticipantSummary.loginPhoneNumber)


class ParticipantGenderAnswers(Base):
    __tablename__ = "participant_gender_answers"
    id = Column("id", Integer, primary_key=True, autoincrement=True, nullable=False)
    """RDR internal id for that specific answer"""
    participantId = Column("participant_id", Integer, ForeignKey("participant.participant_id"), autoincrement=False)
    """Participant that provided the answer"""
    created = Column("created", DateTime, nullable=True)
    """When RDR received the answers"""
    modified = Column("modified", DateTime, nullable=True)
    """When the record was modified"""
    codeId = Column("code_id", Integer, ForeignKey("code.code_id"), nullable=False)
    """Code tied to answer to PPI question"""


event.listen(ParticipantGenderAnswers, "before_insert", model_insert_listener)
event.listen(ParticipantGenderAnswers, "before_update", model_update_listener)


class ParticipantRaceAnswers(Base):
    __tablename__ = "participant_race_answers"
    id = Column("id", Integer, primary_key=True, autoincrement=True, nullable=False)
    """RDR internal id for that specific answer"""
    participantId = Column("participant_id", Integer, ForeignKey("participant.participant_id"), autoincrement=False)
    """Id of the participant that has answered"""
    created = Column("created", DateTime, nullable=True)
    """When RDR received the answer"""
    modified = Column("modified", DateTime, nullable=True)
    """When the record was modified"""
    codeId = Column("code_id", Integer, ForeignKey("code.code_id"), nullable=False)
    """Code tied to answer to PPI question"""


event.listen(ParticipantRaceAnswers, "before_insert", model_insert_listener)
event.listen(ParticipantRaceAnswers, "before_update", model_update_listener)
