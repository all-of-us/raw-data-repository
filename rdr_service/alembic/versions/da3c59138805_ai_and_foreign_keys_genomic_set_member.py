"""ai and foreign keys genomic set member

Revision ID: da3c59138805
Revises: 6f26f7c49be7
Create Date: 2020-02-19 15:04:32.203546

"""
from alembic import op
import sqlalchemy as sa
import model.utils
from sqlalchemy.dialects import mysql

from rdr_service.participant_enums import PhysicalMeasurementsStatus, QuestionnaireStatus, OrderStatus
from rdr_service.participant_enums import WithdrawalStatus, WithdrawalReason, SuspensionStatus, QuestionnaireDefinitionStatus
from rdr_service.participant_enums import EnrollmentStatus, Race, SampleStatus, OrganizationType, BiobankOrderStatus
from rdr_service.participant_enums import OrderShipmentTrackingStatus, OrderShipmentStatus
from rdr_service.participant_enums import MetricSetType, MetricsKey, GenderIdentity
from rdr_service.model.base import add_table_history_table, drop_table_history_table
from rdr_service.model.code import CodeType
from rdr_service.model.site_enums import SiteStatus, EnrollingStatus, DigitalSchedulingStatus, ObsoleteStatus

# revision identifiers, used by Alembic.
revision = 'da3c59138805'
down_revision = '6f26f7c49be7'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()[f"upgrade_{engine_name}"]()


def downgrade(engine_name):
    globals()[f"downgrade_{engine_name}"]()



def upgrade_rdr():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('genomic_set_member', sa.Column('ai_an', sa.String(length=2), nullable=True))
    op.alter_column('genomic_set_member', 'participant_id',
               existing_type=mysql.INTEGER(display_width=11),
               nullable=True)
    # Only delete the participant_id foreign key if it exists (stable won't have it)
    constraint_sql = """
            SELECT count(*)
            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
            WHERE REFERENCED_TABLE_SCHEMA = 'rdr'
                AND TABLE_NAME = 'genomic_set_member'
                AND CONSTRAINT_NAME = 'genomic_set_member_ibfk_3'
                AND REFERENCED_COLUMN_NAME = 'participant_id'
        """
    connection = op.get_bind()
    pid_key_exists = connection.execute(constraint_sql).fetchone()[0]
    if pid_key_exists == 1:
        op.drop_constraint('genomic_set_member_ibfk_3', 'genomic_set_member', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade_rdr():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key('genomic_set_member_ibfk_3', 'genomic_set_member', 'participant', ['participant_id'], ['participant_id'])
    op.alter_column('genomic_set_member', 'participant_id',
               existing_type=mysql.INTEGER(display_width=11),
               nullable=False)
    op.drop_column('genomic_set_member', 'ai_an')
    # ### end Alembic commands ###


def upgrade_metrics():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_metrics():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
