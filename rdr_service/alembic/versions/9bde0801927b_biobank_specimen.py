"""biobank specimen


Revision ID: 9bde0801927b
Revises: e66a20e7af08
Create Date: 2020-04-06 14:48:34.437968

"""
from alembic import op
import sqlalchemy as sa
import model.utils
from sqlalchemy.dialects import mysql

# from rdr_service.participant_enums import PhysicalMeasurementsStatus, QuestionnaireStatus, OrderStatus
# from rdr_service.participant_enums import WithdrawalStatus, WithdrawalReason, SuspensionStatus, QuestionnaireDefinitionStatus
# from rdr_service.participant_enums import EnrollmentStatus, Race, SampleStatus, OrganizationType, BiobankOrderStatus
# from rdr_service.participant_enums import OrderShipmentTrackingStatus, OrderShipmentStatus
# from rdr_service.participant_enums import MetricSetType, MetricsKey, GenderIdentity
# from rdr_service.model.base import add_table_history_table, drop_table_history_table
# from rdr_service.model.code import CodeType
# from rdr_service.model.site_enums import SiteStatus, EnrollingStatus, DigitalSchedulingStatus, ObsoleteStatus
import rdr_service

# revision identifiers, used by Alembic.
revision = '9bde0801927b'
down_revision = 'e66a20e7af08'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()



def upgrade_rdr():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('biobank_specimen',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
    sa.Column('modified', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
    sa.Column('sample_type', sa.String(length=80), nullable=True),
    sa.Column('status', sa.String(length=100), nullable=True),
    sa.Column('disposal_reason', sa.String(length=80), nullable=True),
    sa.Column('disposal_date', rdr_service.model.utils.UTCDateTime(), nullable=True),
    sa.Column('freeze_thaw_count', sa.Integer(), nullable=True),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('quantity', sa.String(length=80), nullable=True),
    sa.Column('quantity_units', sa.String(length=80), nullable=True),
    sa.Column('processing_complete_date', rdr_service.model.utils.UTCDateTime(), nullable=True),
    sa.Column('deviations', mysql.JSON(), nullable=False),
    sa.Column('rlims_id', sa.String(length=80), nullable=True),
    sa.Column('order_id', sa.String(length=80), nullable=False),
    sa.Column('test_code', sa.String(length=80), nullable=True),
    sa.Column('repository_id', sa.String(length=80), nullable=True),
    sa.Column('study_id', sa.String(length=80), nullable=True),
    sa.Column('cohort_id', sa.String(length=80), nullable=True),
    sa.Column('collection_date', rdr_service.model.utils.UTCDateTime(), nullable=True),
    sa.Column('confirmed_date', rdr_service.model.utils.UTCDateTime(), nullable=True),
    sa.Column('participant_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['biobank_order.biobank_order_id'], ),
    sa.ForeignKeyConstraint(['participant_id'], ['participant.participant_id'], ),
    sa.PrimaryKeyConstraint('id', 'order_id'),
    sa.UniqueConstraint('rlims_id')
    )
    op.create_table('biobank_aliquot',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
    sa.Column('modified', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
    sa.Column('sample_type', sa.String(length=80), nullable=True),
    sa.Column('status', sa.String(length=100), nullable=True),
    sa.Column('disposal_reason', sa.String(length=80), nullable=True),
    sa.Column('disposal_date', rdr_service.model.utils.UTCDateTime(), nullable=True),
    sa.Column('freeze_thaw_count', sa.Integer(), nullable=True),
    sa.Column('location', sa.String(length=200), nullable=True),
    sa.Column('quantity', sa.String(length=80), nullable=True),
    sa.Column('quantity_units', sa.String(length=80), nullable=True),
    sa.Column('processing_complete_date', rdr_service.model.utils.UTCDateTime(), nullable=True),
    sa.Column('deviations', mysql.JSON(), nullable=False),
    sa.Column('rlims_id', sa.String(length=80), nullable=True),
    sa.Column('child_plan_service', sa.String(length=100), nullable=True),
    sa.Column('initial_treatment', sa.String(length=100), nullable=True),
    sa.Column('container_type_id', sa.String(length=100), nullable=True),
    sa.Column('specimen_id', sa.Integer(), nullable=True),
    sa.Column('specimen_rlims_id', sa.String(length=80), nullable=True),
    sa.Column('parent_aliquot_id', sa.String(length=80), nullable=True),
    sa.Column('parent_aliquot_rlims_id', sa.String(length=80), nullable=True),
    sa.ForeignKeyConstraint(['specimen_id'], ['biobank_specimen.id'], ),
    sa.ForeignKeyConstraint(['specimen_rlims_id'], ['biobank_specimen.order_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('rlims_id')
    )
    op.create_table('biobank_specimen_attribute',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
    sa.Column('modified', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('value', sa.String(length=80), nullable=True),
    sa.Column('specimen_id', sa.Integer(), nullable=True),
    sa.Column('specimen_rlims_id', sa.String(length=80), nullable=True),
    sa.ForeignKeyConstraint(['specimen_id'], ['biobank_specimen.id'], ),
    sa.ForeignKeyConstraint(['specimen_rlims_id'], ['biobank_specimen.rlims_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('biobank_aliquot_dataset',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
    sa.Column('modified', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
    sa.Column('rlims_id', sa.String(length=80), nullable=True),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('status', sa.String(length=80), nullable=True),
    sa.Column('aliquot_id', sa.Integer(), nullable=True),
    sa.Column('aliquot_rlims_id', sa.String(length=80), nullable=True),
    sa.ForeignKeyConstraint(['aliquot_id'], ['biobank_aliquot.id'], ),
    sa.ForeignKeyConstraint(['aliquot_rlims_id'], ['biobank_aliquot.rlims_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('rlims_id')
    )
    op.create_table('biobank_aliquot_dataset_item',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
    sa.Column('modified', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
    sa.Column('param_id', sa.String(length=80), nullable=True),
    sa.Column('display_value', sa.String(length=80), nullable=True),
    sa.Column('display_units', sa.String(length=80), nullable=True),
    sa.Column('dataset_id', sa.Integer(), nullable=True),
    sa.Column('dataset_rlims_id', sa.String(length=80), nullable=True),
    sa.ForeignKeyConstraint(['dataset_id'], ['biobank_aliquot_dataset.id'], ),
    sa.ForeignKeyConstraint(['dataset_rlims_id'], ['biobank_aliquot_dataset.rlims_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('genomic_set_member', sa.Column('reconcile_metrics_genotyping_job_run_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'genomic_set_member', 'genomic_job_run', ['reconcile_metrics_genotyping_job_run_id'], ['id'])
    # ### end Alembic commands ###


def downgrade_rdr():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'genomic_set_member', type_='foreignkey')
    op.drop_column('genomic_set_member', 'reconcile_metrics_genotyping_job_run_id')
    op.drop_table('biobank_aliquot_dataset_item')
    op.drop_table('biobank_aliquot_dataset')
    op.drop_table('biobank_specimen_attribute')
    op.drop_table('biobank_aliquot')
    op.drop_table('biobank_specimen')
    # ### end Alembic commands ###


def upgrade_metrics():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_metrics():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

