"""Creating Participant Data to Tactis table for BigQuery/Tactis Sync

Revision ID: aae1c647e5c8
Revises: 2bea492cc65a, 284c397c2ade
Create Date: 2024-01-23 16:23:14.313894

"""
from alembic import op
import sqlalchemy as sa
import rdr_service.model.utils
from sqlalchemy.dialects import mysql

from rdr_service.participant_enums import PhysicalMeasurementsStatus, QuestionnaireStatus, OrderStatus
from rdr_service.participant_enums import WithdrawalStatus, WithdrawalReason, SuspensionStatus, QuestionnaireDefinitionStatus
from rdr_service.participant_enums import EnrollmentStatus, Race, SampleStatus, OrganizationType, BiobankOrderStatus
from rdr_service.participant_enums import OrderShipmentTrackingStatus, OrderShipmentStatus
from rdr_service.participant_enums import MetricSetType, MetricsKey, GenderIdentity
from rdr_service.model.base import add_table_history_table, drop_table_history_table
from rdr_service.model.code import CodeType
from rdr_service.model.site_enums import SiteStatus, EnrollingStatus, DigitalSchedulingStatus, ObsoleteStatus

# revision identifiers, used by Alembic.
revision = 'aae1c647e5c8'
down_revision = ('2bea492cc65a', '284c397c2ade')
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()



def upgrade_rdr():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('participant_data_to_tactis',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=255), nullable=True),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['participant_id'], ['participant.participant_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute("""
                CREATE  PROCEDURE rdr.populate_rdr_to_tactis_tbl ( IN participant_id INTEGER, IN action VARCHAR(50))
                BEGIN
                INSERT INTO rdr.participant_data_to_tactis
                    (participant_id, action)
                VALUES
                    (participant_id, action);
                END;
            """)
    op.execute("""
                CREATE TRIGGER ps_tactis_update_trg AFTER UPDATE ON rdr.participant_summary
                FOR EACH ROW BEGIN
                    IF (NEW.first_name <> OLD.first_name)
                        OR (NEW.last_name <> OLD.last_name)
                        OR (NEW.middle_name <> OLD.middle_name)
                        OR (NEW.email <> OLD.email)
                        OR (NEW.phone_number <> OLD.phone_number)
                        OR (NEW.participant_origin <> OLD.participant_origin)
                    THEN
                        CALL  rdr.populate_rdr_to_tactis_tbl(NEW.participant_id, 'UPDATE');
                    END IF;
                END;
            """)
    op.execute("""
                CREATE TRIGGER ps_tactis_insert_trg AFTER INSERT ON rdr.participant_summary
                FOR EACH ROW BEGIN
                    CALL  rdr.populate_rdr_to_tactis_tbl(NEW.participant_id, 'INSERT');
                END;
            """)
    # ### end Alembic commands ###


def downgrade_rdr():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('participant_data_to_tactis')
    # ### end Alembic commands ###


def upgrade_metrics():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_metrics():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

