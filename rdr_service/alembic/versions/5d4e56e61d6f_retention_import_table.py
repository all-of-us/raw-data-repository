"""retention import table

Revision ID: 5d4e56e61d6f
Revises: cb4bddc0f5f8
Create Date: 2021-02-23 11:59:36.546538

"""
from alembic import op
import sqlalchemy as sa
import rdr_service.model.utils
from rdr_service.participant_enums import RetentionType, RetentionStatus

from rdr_service.participant_enums import PhysicalMeasurementsStatus, QuestionnaireStatus, OrderStatus
from rdr_service.participant_enums import WithdrawalStatus, WithdrawalReason, SuspensionStatus, QuestionnaireDefinitionStatus
from rdr_service.participant_enums import EnrollmentStatus, Race, SampleStatus, OrganizationType, BiobankOrderStatus
from rdr_service.participant_enums import OrderShipmentTrackingStatus, OrderShipmentStatus
from rdr_service.participant_enums import MetricSetType, MetricsKey, GenderIdentity
from rdr_service.model.base import add_table_history_table, drop_table_history_table
from rdr_service.model.code import CodeType
from rdr_service.model.site_enums import SiteStatus, EnrollingStatus, DigitalSchedulingStatus, ObsoleteStatus

# revision identifiers, used by Alembic.
revision = '5d4e56e61d6f'
down_revision = 'cb4bddc0f5f8'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()



def upgrade_rdr():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('retention_eligible_metrics',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
                    sa.Column('modified', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
                    sa.Column('participant_id', sa.Integer(), nullable=False),
                    sa.Column('retention_eligible', sa.Boolean(), nullable=True),
                    sa.Column('retention_eligible_time', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
                    sa.Column('actively_retained', sa.Boolean(), nullable=True),
                    sa.Column('passively_retained', sa.Boolean(), nullable=True),
                    sa.Column('file_upload_date', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True),
                    sa.Column('retention_eligible_status', rdr_service.model.utils.Enum(RetentionStatus),
                              nullable=True),
                    sa.Column('retention_type', rdr_service.model.utils.Enum(RetentionType), nullable=True),
                    sa.ForeignKeyConstraint(['participant_id'], ['participant.participant_id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_retention_eligible_metrics_participant_id'), 'retention_eligible_metrics',
                    ['participant_id'], unique=True)

    op.drop_column('participant_summary', 'retention_eligible_time')
    op.drop_column('participant_summary', 'retention_eligible_status')

    op.add_column('participant_summary',
                  sa.Column('retention_eligible_time', rdr_service.model.utils.UTCDateTime6(fsp=6), nullable=True))
    op.add_column('participant_summary',
                  sa.Column('retention_eligible_status', rdr_service.model.utils.Enum(RetentionStatus), nullable=True))
    op.add_column('participant_summary',
                  sa.Column('retention_type', rdr_service.model.utils.Enum(RetentionType), nullable=True))
    # ### end Alembic commands ###


def downgrade_rdr():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('participant_summary', 'retention_type')
    op.drop_column('participant_summary', 'retention_eligible_time')
    op.drop_column('participant_summary', 'retention_eligible_status')
    op.add_column('participant_summary',
                  sa.Column('retention_eligible_status', rdr_service.model.utils.Enum(RetentionStatus),
                            sa.Computed(
                                '\n    CASE WHEN\n      consent_for_study_enrollment = 1\n      AND (consent_for_electronic_health_records = 1 OR consent_for_dv_electronic_health_records_sharing = 1)\n      AND questionnaire_on_the_basics = 1\n      AND questionnaire_on_overall_health = 1\n      AND questionnaire_on_lifestyle = 1\n      AND withdrawal_status = 1\n      AND suspension_status = 1\n      AND samples_to_isolate_dna = 1\n    THEN 2 ELSE 1\n    END\n',
                                persisted=True), nullable=True))
    op.add_column('participant_summary', sa.Column('retention_eligible_time', rdr_service.model.utils.UTCDateTime(),
                                                   sa.Computed(
                                                       "\n     CASE WHEN retention_eligible_status = 2 AND\n          COALESCE(sample_status_1ed10_time, sample_status_2ed10_time, sample_status_1ed04_time,\n                 sample_status_1sal_time, sample_status_1sal2_time, 0) != 0\n        THEN GREATEST(\n            GREATEST (consent_for_study_enrollment_authored,\n             questionnaire_on_the_basics_authored,\n             questionnaire_on_overall_health_authored,\n             questionnaire_on_lifestyle_authored,\n             COALESCE(consent_for_electronic_health_records_authored, consent_for_study_enrollment_authored),\n             COALESCE(consent_for_dv_electronic_health_records_sharing_authored, consent_for_study_enrollment_authored)\n            ),\n            LEAST(COALESCE(sample_status_1ed10_time, '9999-01-01'),\n                COALESCE(sample_status_2ed10_time, '9999-01-01'),\n                COALESCE(sample_status_1ed04_time, '9999-01-01'),\n                COALESCE(sample_status_1sal_time, '9999-01-01'),\n                COALESCE(sample_status_1sal2_time, '9999-01-01')\n            )\n        )\n        ELSE NULL\n     END\n",
                                                       persisted=True),
                                                   nullable=True))
    op.drop_index(op.f('ix_retention_eligible_metrics_participant_id'), table_name='retention_eligible_metrics')
    op.drop_table('retention_eligible_metrics')
    # ### end Alembic commands ###


def upgrade_metrics():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_metrics():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
