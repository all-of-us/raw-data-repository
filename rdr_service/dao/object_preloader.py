from abc import ABC, abstractmethod
import logging


class LoadingStrategy(ABC):
    """
    Used to define how objects are preloaded
    """

    @staticmethod
    @abstractmethod
    def get_key_from_object(obj):
        """
        Defines how an object is unique from others in order to hold them in memory.
        :param obj: Model object that is prepopulated with enough information to make it uniquely identifiable
        :return: A serializable object (or primitive) that can be used as the key of a dictionary
        """
        pass

    @staticmethod
    @abstractmethod
    def get_filtered_query(query, object_class, keys):
        """
        Filters a SQLAlchemy query down to a specify set of objects based on the keys provided.
        :param query: SQLAlchemy query to apply the filter to
        :param object_class: The SQLAlchemy model class to use for the query
        :param keys: A collection of keys generated by the get_key_from_object method. Used to specify what objects
            should be loaded from the database.
        :return:
        """
        pass


class ObjectPreloader:
    """
    Convenience class for tracking a collection of objects that need to be loaded from the database and making a
    minimal number of queries to retrieve them.
    """

    def __init__(self, strategy_map):
        """
        Creates the ObjectPreloader.
        :param strategy_map: A dictionary keyed with each model class that will need to be loaded, and a concrete
        LoadingStrategy class that defines how to interact with the object
        """
        self._object_class_map = {}
        self._strategy_map = strategy_map

    def _get_strategy_for_class(self, object_class) -> LoadingStrategy:
        strategy = self._strategy_map.get(object_class)

        if strategy is None:
            logging.error(f'No loading strategy registered for {object_class}')

        return strategy

    def _get_object_map_for_class(self, object_class):
        object_map = self._object_class_map.get(object_class)

        if object_map is None:
            object_map = {}
            self._object_class_map[object_class] = object_map

        return object_map

    def register_for_hydration(self, obj):
        """
        Register that an object will need to be loaded.
        :param obj: Model instance that defines enough for uniquely identifying the object to load
        """
        object_class = type(obj)
        object_map = self._get_object_map_for_class(object_class)
        strategy = self._get_strategy_for_class(object_class)
        object_map[strategy.get_key_from_object(obj)] = None

    def hydrate(self, session):
        """
        Load all objects that have been registered.
        :param session: SQLAlchemy session to use for interacting with the database
        """
        for object_class, object_map in self._object_class_map.items():
            strategy = self._get_strategy_for_class(object_class)

            query = session.query(object_class)
            query = strategy.get_filtered_query(query, object_class, object_map.keys())

            for obj in query.all():
                key = strategy.get_key_from_object(obj)
                object_map[key] = obj

    def get_object(self, obj):
        """
        Retrieve an object that has been loaded from the database.
        :param obj: Model instance that defines enough for uniquely identifying the object to return from the database
        :return: Returns the model instance that has been retrieved from the database, or None if it wasn't found
        """
        object_class = type(obj)
        object_map = self._get_object_map_for_class(object_class)
        strategy = self._get_strategy_for_class(object_class)
        return object_map.get(strategy.get_key_from_object(obj))
